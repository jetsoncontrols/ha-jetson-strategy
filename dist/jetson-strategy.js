/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/deepmerge/dist/cjs.js":
/*!********************************************!*\
  !*** ./node_modules/deepmerge/dist/cjs.js ***!
  \********************************************/
/***/ ((module) => {

"use strict";
eval("{\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction getMergeFunction(key, options) {\n\tif (!options.customMerge) {\n\t\treturn deepmerge\n\t}\n\tvar customMerge = options.customMerge(key);\n\treturn typeof customMerge === 'function' ? customMerge : deepmerge\n}\n\nfunction getEnumerableOwnPropertySymbols(target) {\n\treturn Object.getOwnPropertySymbols\n\t\t? Object.getOwnPropertySymbols(target).filter(function(symbol) {\n\t\t\treturn Object.propertyIsEnumerable.call(target, symbol)\n\t\t})\n\t\t: []\n}\n\nfunction getKeys(target) {\n\treturn Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))\n}\n\nfunction propertyIsOnObject(object, property) {\n\ttry {\n\t\treturn property in object\n\t} catch(_) {\n\t\treturn false\n\t}\n}\n\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target, key) {\n\treturn propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n\t\t&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n\t\t\t&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tgetKeys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tgetKeys(source).forEach(function(key) {\n\t\tif (propertyIsUnsafe(target, key)) {\n\t\t\treturn\n\t\t}\n\n\t\tif (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n\t\t\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\t// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n\t// implementations can use it. The caller may not replace it.\n\toptions.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nmodule.exports = deepmerge_1;\n\n\n//# sourceURL=webpack://jetson-strategy/./node_modules/deepmerge/dist/cjs.js?\n}");

/***/ }),

/***/ "./src/Registry.ts":
/*!*************************!*\
  !*** ./src/Registry.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Registry: () => (/* binding */ Registry)\n/* harmony export */ });\n/* harmony import */ var deepmerge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! deepmerge */ \"./node_modules/deepmerge/dist/cjs.js\");\n/* harmony import */ var deepmerge__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(deepmerge__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _types_strategy_strategy_generics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types/strategy/strategy-generics */ \"./src/types/strategy/strategy-generics.ts\");\n/* harmony import */ var _utilities_debug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utilities/debug */ \"./src/utilities/debug.ts\");\n/* harmony import */ var _utilities_localize__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utilities/localize */ \"./src/utilities/localize.ts\");\n/* harmony import */ var _utilities_RegistryFilter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utilities/RegistryFilter */ \"./src/utilities/RegistryFilter.ts\");\n\n\n\n\n\n/**\n * Registry Class\n *\n * Contains the entries of Home Assistant's registries and Strategy configuration.\n */\nclass Registry {\n    /**\n     * Class constructor.\n     *\n     * @remarks\n     * This class shouldn't be instantiated directly.\n     * Instead, method {@link Registry.initialize} must be invoked.\n     */\n    // noinspection JSUnusedLocalSymbols\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    constructor() { }\n    /**\n     * Home Assistant's Device registry.\n     *\n     * @remarks\n     * This module makes changes to the registry at {@link Registry.initialize}.\n     */\n    static get devices() {\n        return Registry._devices;\n    }\n    /** Home Assistant's State registry. */\n    static get hassStates() {\n        return Registry._hassStates;\n    }\n    /** Get the initialization status of the Registry class. */\n    static get initialized() {\n        return Registry._initialized;\n    }\n    /**\n     * Home Assistant's Entity registry.\n     *\n     * @remarks\n     * This module makes changes to the registry at {@link Registry.initialize}.\n     */\n    static get entities() {\n        return Registry._entities;\n    }\n    /**\n     * Home Assistant's Floor registry.\n     *\n     * @remarks\n     * This module makes changes to the registry at {@link Registry.initialize}.\n     */\n    static get floors() {\n        return Registry._floors;\n    }\n    /**\n     * Home Assistant's Area registry.\n     *\n     * @remarks\n     * This module makes changes to the registry at {@link Registry.initialize}.\n     */\n    static get areas() {\n        return Registry._areas;\n    }\n    /** The configuration of the strategy. */\n    static get strategyOptions() {\n        return Registry._strategyOptions;\n    }\n    /**\n     * Initialize this module.\n     *\n     * Imports the registries of Home Assistant and the strategy options.\n     *\n     * After importing, the registries are sanitized according to the provided strategy options.\n     * This method must be called before using any other Registry functionality that depends on the imported data.\n     *\n     * @param {DashboardInfo} info Strategy information object.\n     */\n    static async initialize(info) {\n        (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(info.hass);\n        // Import the Hass States and strategy options.\n        Registry._hassStates = info.hass.states;\n        const { ConfigurationDefaults } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./configurationDefaults */ \"./src/configurationDefaults.ts\"));\n        try {\n            Registry._strategyOptions = deepmerge__WEBPACK_IMPORTED_MODULE_0___default()(ConfigurationDefaults, info.config?.strategy?.options ?? {});\n        }\n        catch (e) {\n            (0,_utilities_debug__WEBPACK_IMPORTED_MODULE_2__.logMessage)(_utilities_debug__WEBPACK_IMPORTED_MODULE_2__.lvlFatal, 'Error importing strategy options!', e);\n        }\n        (0,_utilities_debug__WEBPACK_IMPORTED_MODULE_2__.setDebugLevel)(Registry.strategyOptions.debug ? _utilities_debug__WEBPACK_IMPORTED_MODULE_2__.lvlFatal : _utilities_debug__WEBPACK_IMPORTED_MODULE_2__.lvlOff);\n        // Import the registries of Home Assistant.\n        try {\n            // noinspection ES6MissingAwait False positive? https://youtrack.jetbrains.com/issue/WEB-63746\n            [Registry._entities, Registry._devices, Registry._areas, Registry._floors] = await Promise.all([\n                info.hass.callWS({ type: 'config/entity_registry/list' }),\n                info.hass.callWS({ type: 'config/device_registry/list' }),\n                info.hass.callWS({ type: 'config/area_registry/list' }),\n                info.hass.callWS({ type: 'config/floor_registry/list' }),\n            ]);\n        }\n        catch (e) {\n            (0,_utilities_debug__WEBPACK_IMPORTED_MODULE_2__.logMessage)(_utilities_debug__WEBPACK_IMPORTED_MODULE_2__.lvlFatal, 'Error importing Home Assistant registries!', e);\n        }\n        // Process the entries of the Strategy Options.\n        Registry._strategyOptions.extra_views.map((view) => ({\n            ...view,\n            subview: false,\n        }));\n        // Process entries of the HASS entity registry.\n        Registry._entities = new _utilities_RegistryFilter__WEBPACK_IMPORTED_MODULE_4__[\"default\"](Registry.entities)\n            .not()\n            .whereEntityCategory('config')\n            .not()\n            .whereEntityCategory('diagnostic')\n            .isNotHidden()\n            .whereDisabledBy(null)\n            .orderBy(['name', 'original_name'], 'asc')\n            .toList();\n        Registry._entities = Registry.entities.map((entity) => ({\n            ...entity,\n            area_id: entity.area_id ?? 'undisclosed',\n        }));\n        // Process entries of the HASS device registry.\n        Registry._devices = new _utilities_RegistryFilter__WEBPACK_IMPORTED_MODULE_4__[\"default\"](Registry.devices)\n            .isNotHidden()\n            .whereDisabledBy(null)\n            .orderBy(['name_by_user', 'name'], 'asc')\n            .toList();\n        Registry._devices = Registry.devices.map((device) => ({\n            ...device,\n            area_id: device.area_id ?? 'undisclosed',\n        }));\n        // Process entries of the HASS floor registry.\n        if (Registry.strategyOptions.floors._.hidden) {\n            Registry._floors = [];\n        }\n        else {\n            // Create and add the undisclosed floor if not hidden in the strategy options.\n            if (!Registry.strategyOptions.floors.undisclosed?.hidden) {\n                Registry._floors.push(ConfigurationDefaults.floors.undisclosed);\n            }\n            // Merge floor configurations of the Strategy options into the entries of the floor registry.\n            Registry._floors = Registry.floors\n                .filter((floor) => floor != null)\n                .map((floor) => {\n                const order = floor.level !== null ? floor.level : undefined;\n                return {\n                    ...floor,\n                    order,\n                    ...Registry.strategyOptions.floors['_'],\n                    ...Registry.strategyOptions.floors?.[floor.floor_id],\n                };\n            });\n            // Ensure the custom configuration of the undisclosed floor doesn't overwrite the required property values.\n            Registry.strategyOptions.floors.undisclosed.floor_id = 'undisclosed';\n            Registry.strategyOptions.floors.undisclosed.type = 'default';\n            // Remove hidden floors if configured as so and sort them by name.\n            Registry._floors = new _utilities_RegistryFilter__WEBPACK_IMPORTED_MODULE_4__[\"default\"](Registry.floors)\n                .isNotHidden()\n                .orderBy(['order', 'name'], 'asc')\n                .toList();\n        }\n        // Process entries of the HASS area registry.\n        if (Registry.strategyOptions.areas._.hidden) {\n            Registry._areas = [];\n        }\n        else {\n            // Create and add the undisclosed area if not hidden in the strategy options.\n            if (!Registry.strategyOptions.areas.undisclosed?.hidden) {\n                Registry.areas.push(ConfigurationDefaults.areas.undisclosed);\n            }\n            // Merge area configurations of the Strategy options into the entries of the area registry.\n            // TODO: Check for to do the same for devices.\n            Registry._areas = Registry.areas.map((area) => {\n                return { ...area, ...Registry.strategyOptions.areas['_'], ...Registry.strategyOptions.areas?.[area.area_id] };\n            });\n            // Ensure the custom configuration of the undisclosed area doesn't overwrite the required property values.\n            Registry.strategyOptions.areas.undisclosed.area_id = 'undisclosed';\n            Registry.strategyOptions.areas.undisclosed.type = 'default';\n            // Remove hidden areas if configured as so and sort them by name.\n            Registry._areas = new _utilities_RegistryFilter__WEBPACK_IMPORTED_MODULE_4__[\"default\"](Registry.areas).isNotHidden().orderBy(['order', 'name'], 'asc').toList();\n        }\n        // Sort views by order first and then by title.\n        const sortViews = () => {\n            const entries = Object.entries(Registry.strategyOptions.views);\n            Registry.strategyOptions.views = Object.fromEntries(entries.sort(([_, a], [__, b]) => {\n                return (a.order ?? Infinity) - (b.order ?? Infinity) || (a.title ?? '').localeCompare(b.title ?? '');\n            }));\n        };\n        sortViews();\n        // Sort domains by order first and then by title.\n        const sortDomains = () => {\n            const entries = Object.entries(Registry.strategyOptions.domains);\n            Registry.strategyOptions.domains = Object.fromEntries(entries.sort(([, a], [, b]) => {\n                if ((0,_types_strategy_strategy_generics__WEBPACK_IMPORTED_MODULE_1__.isSortable)(a) && (0,_types_strategy_strategy_generics__WEBPACK_IMPORTED_MODULE_1__.isSortable)(b)) {\n                    return (a.order ?? Infinity) - (b.order ?? Infinity) || (a.title ?? '').localeCompare(b.title ?? '');\n                }\n                return 0; // Maintain the original order when none or only one item is sortable.\n            }));\n        };\n        sortDomains();\n        Registry._initialized = true;\n    }\n    /**\n     * Get a template string to define the number of a given domain's entities with a certain state.\n     *\n     * States are compared against a given value by a given operator.\n     * States `unavailable` and `unknown` are always excluded.\n     *\n     * @param {string} domain The domain of the entities.\n     * @param {string} operator The comparison operator between state and value.\n     * @param {string} value The value to which the state is compared against.\n     */\n    static getCountTemplate(domain, operator, value) {\n        // noinspection JSMismatchedCollectionQueryUpdate\n        /**\n         * Array of entity state-entries, filtered by domain.\n         *\n         * Each element contains a template-string which is used to access home assistant's state machine (state object) in\n         * a template; E.g. `states['light.kitchen']`.\n         */\n        const states = [];\n        if (!Registry.initialized) {\n            (0,_utilities_debug__WEBPACK_IMPORTED_MODULE_2__.logMessage)(_utilities_debug__WEBPACK_IMPORTED_MODULE_2__.lvlWarn, 'Registry is not initialized!');\n            return '?';\n        }\n        states.push(...new _utilities_RegistryFilter__WEBPACK_IMPORTED_MODULE_4__[\"default\"](Registry.entities)\n            .whereDomain(domain)\n            .where((entity) => !entity.entity_id.endsWith('_stateful_scene') && entity.platform !== 'group')\n            .toList()\n            .map((entity) => `states['${entity.entity_id}']`));\n        // noinspection SpellCheckingInspection\n        return `{% set entities = [${states}] %}\n       {{ entities\n          | selectattr('state','${operator}','${value}')\n          | selectattr('state','ne','unavailable')\n          | selectattr('state','ne','unknown')\n          | list\n          | count\n        }}`;\n    }\n    /**\n     * Get the names of the specified type which aren't set to hidden in the strategy options.\n     *\n     * @param {string} type The type of options to filter (\"domain\", \"view\").\n     *\n     * @returns {string[]} For domains and views: names of items that aren't hidden.\n     */\n    static getExposedNames(type) {\n        const group = Registry.strategyOptions[`${type}s`];\n        return Object.keys(group).filter((key) => key !== '_' && key !== 'default' && !group[key].hidden);\n    }\n}\n/** Indicates whether this module is initialized. */\nRegistry._initialized = false;\n/** Entries of Home Assistant's floor registry. */\nRegistry._floors = [];\n/** Entries of Home Assistant's area registry. */\nRegistry._areas = [];\n\n\n\n//# sourceURL=webpack://jetson-strategy/./src/Registry.ts?\n}");

/***/ }),

/***/ "./src/cards lazy recursive ^\\.\\/.*$":
/*!***************************************************!*\
  !*** ./src/cards/ lazy ^\.\/.*$ namespace object ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{var map = {\n\t\"./AbstractCard\": [\n\t\t\"./src/cards/AbstractCard.ts\"\n\t],\n\t\"./AbstractCard.ts\": [\n\t\t\"./src/cards/AbstractCard.ts\"\n\t],\n\t\"./AreaCard\": [\n\t\t\"./src/cards/AreaCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./AreaCard.ts\": [\n\t\t\"./src/cards/AreaCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./CameraCard\": [\n\t\t\"./src/cards/CameraCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./CameraCard.ts\": [\n\t\t\"./src/cards/CameraCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./ClimateCard\": [\n\t\t\"./src/cards/ClimateCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./ClimateCard.ts\": [\n\t\t\"./src/cards/ClimateCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./ClockWeatherCard\": [\n\t\t\"./src/cards/ClockWeatherCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./ClockWeatherCard.ts\": [\n\t\t\"./src/cards/ClockWeatherCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./CoverCard\": [\n\t\t\"./src/cards/CoverCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./CoverCard.ts\": [\n\t\t\"./src/cards/CoverCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./ExpanderCard\": [\n\t\t\"./src/cards/ExpanderCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./ExpanderCard.ts\": [\n\t\t\"./src/cards/ExpanderCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./FanCard\": [\n\t\t\"./src/cards/FanCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./FanCard.ts\": [\n\t\t\"./src/cards/FanCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./GridCard\": [\n\t\t\"./src/cards/GridCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./GridCard.ts\": [\n\t\t\"./src/cards/GridCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./HeaderCard\": [\n\t\t\"./src/cards/HeaderCard.ts\"\n\t],\n\t\"./HeaderCard.ts\": [\n\t\t\"./src/cards/HeaderCard.ts\"\n\t],\n\t\"./HeadingCard\": [\n\t\t\"./src/cards/HeadingCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./HeadingCard.ts\": [\n\t\t\"./src/cards/HeadingCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./HorizontalStackCard\": [\n\t\t\"./src/cards/HorizontalStackCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./HorizontalStackCard.ts\": [\n\t\t\"./src/cards/HorizontalStackCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./LightCard\": [\n\t\t\"./src/cards/LightCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./LightCard.ts\": [\n\t\t\"./src/cards/LightCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./LockCard\": [\n\t\t\"./src/cards/LockCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./LockCard.ts\": [\n\t\t\"./src/cards/LockCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./MiscellaneousCard\": [\n\t\t\"./src/cards/MiscellaneousCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./MiscellaneousCard.ts\": [\n\t\t\"./src/cards/MiscellaneousCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./PersonCard\": [\n\t\t\"./src/cards/PersonCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./PersonCard.ts\": [\n\t\t\"./src/cards/PersonCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./SceneCard\": [\n\t\t\"./src/cards/SceneCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./SceneCard.ts\": [\n\t\t\"./src/cards/SceneCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./SensorCard\": [\n\t\t\"./src/cards/SensorCard.ts\"\n\t],\n\t\"./SensorCard.ts\": [\n\t\t\"./src/cards/SensorCard.ts\"\n\t],\n\t\"./SwitchCard\": [\n\t\t\"./src/cards/SwitchCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./SwitchCard.ts\": [\n\t\t\"./src/cards/SwitchCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./TileCard\": [\n\t\t\"./src/cards/TileCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./TileCard.ts\": [\n\t\t\"./src/cards/TileCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./VacuumCard\": [\n\t\t\"./src/cards/VacuumCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./VacuumCard.ts\": [\n\t\t\"./src/cards/VacuumCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./ValveCard\": [\n\t\t\"./src/cards/ValveCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./ValveCard.ts\": [\n\t\t\"./src/cards/ValveCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./WeatherRadarCard\": [\n\t\t\"./src/cards/WeatherRadarCard.ts\",\n\t\t\"main\"\n\t],\n\t\"./WeatherRadarCard.ts\": [\n\t\t\"./src/cards/WeatherRadarCard.ts\",\n\t\t\"main\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = \"./src/cards lazy recursive ^\\\\.\\\\/.*$\";\nmodule.exports = webpackAsyncContext;\n\n//# sourceURL=webpack://jetson-strategy/./src/cards/_lazy_^\\.\\/.*$_namespace_object?\n}");

/***/ }),

/***/ "./src/cards/AbstractCard.ts":
/*!***********************************!*\
  !*** ./src/cards/AbstractCard.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Registry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Registry */ \"./src/Registry.ts\");\n/* harmony import */ var _utilities_debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/debug */ \"./src/utilities/debug.ts\");\n\n\n/**\n * Abstract Card Class\n *\n * To create a card configuration, this class should be extended by a child class.\n * Child classes should override the default configuration so the card correctly reflects the entity.\n *\n * @remarks\n * Before using this class, the Registry module must be initialized by calling {@link Registry.initialize}.\n */\nclass AbstractCard {\n    /**\n     * Class constructor.\n     *\n     * @param {RegistryEntry} entity The registry entry to create a card configuration for.\n     *\n     * @remarks\n     * Before this class can be used, the Registry module must be initialized by calling {@link Registry.initialize}.\n     */\n    constructor(entity) {\n        /**\n         * The card configuration for this entity.\n         *\n         * Child classes should override this property to reflect their own card type and options.\n         */\n        this.configuration = {\n            type: 'tile',\n            icon: 'mdi:help-circle',\n        };\n        if (!_Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.initialized) {\n            (0,_utilities_debug__WEBPACK_IMPORTED_MODULE_1__.logMessage)(_utilities_debug__WEBPACK_IMPORTED_MODULE_1__.lvlFatal, 'Registry not initialized!');\n        }\n        this.entity = entity;\n    }\n    /**\n     * Get a card configuration.\n     *\n     * The configuration should be set by any of the child classes so the card correctly reflects an entity.\n     */\n    getCard() {\n        return {\n            ...this.configuration,\n            entity: this.entity && 'entity_id' in this.entity ? this.entity.entity_id : undefined,\n        };\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AbstractCard);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/cards/AbstractCard.ts?\n}");

/***/ }),

/***/ "./src/cards/AreaCard.ts":
/*!*******************************!*\
  !*** ./src/cards/AreaCard.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _AbstractCard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractCard */ \"./src/cards/AbstractCard.ts\");\n\n/**\n * Area Card Class\n *\n * Used to create card configuration for an entry of the HASS area registry.\n */\nclass AreaCard extends _AbstractCard__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /** Returns the default configuration object for the card. */\n    static getDefaultConfig() {\n        return {\n            type: 'custom:mushroom-template-card',\n            primary: undefined,\n            icon: 'mdi:floor-plan',\n            icon_color: 'blue',\n            tap_action: { action: 'navigate', navigation_path: '' },\n            hold_action: { action: 'none' },\n        };\n    }\n    /**\n     * Class constructor.\n     *\n     * @param {AreaRegistryEntry} area The HASS area to create a card configuration for.\n     * @param {TemplateCardConfig} [customConfiguration] Custom card configuration.\n     */\n    constructor(area, customConfiguration) {\n        super(area);\n        const configuration = AreaCard.getDefaultConfig();\n        let customConfig = customConfiguration;\n        configuration.primary = area.name;\n        configuration.icon = area.icon || configuration.icon;\n        if (configuration.tap_action && 'navigation_path' in configuration.tap_action) {\n            configuration.tap_action.navigation_path = area.area_id;\n        }\n        // Don't override the card type if set differently in the strategy options.\n        if (customConfig) {\n            customConfig = { ...customConfig, type: configuration.type };\n        }\n        this.configuration = { ...this.configuration, ...configuration, ...customConfig };\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AreaCard);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/cards/AreaCard.ts?\n}");

/***/ }),

/***/ "./src/cards/CameraCard.ts":
/*!*********************************!*\
  !*** ./src/cards/CameraCard.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _AbstractCard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractCard */ \"./src/cards/AbstractCard.ts\");\n// noinspection JSUnusedGlobalSymbols Class is dynamically imported.\n\n/**\n * Camera Card Class\n *\n * Used to create a card configuration to control an entity of the camera domain.\n */\nclass CameraCard extends _AbstractCard__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /** Returns the default configuration object for the card. */\n    static getDefaultConfig() {\n        return {\n            entity: '',\n            type: 'picture-entity',\n            show_name: false,\n            show_state: false,\n            camera_view: 'live',\n        };\n    }\n    /**\n     * Class constructor.\n     *\n     * @param {EntityRegistryEntry} entity The HASS entity to create a card configuration for.\n     * @param {PictureEntityCardConfig} [customConfiguration] Custom card configuration.\n     */\n    constructor(entity, customConfiguration) {\n        super(entity);\n        this.configuration = { ...this.configuration, ...CameraCard.getDefaultConfig(), ...customConfiguration };\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CameraCard);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/cards/CameraCard.ts?\n}");

/***/ }),

/***/ "./src/cards/ClimateCard.ts":
/*!**********************************!*\
  !*** ./src/cards/ClimateCard.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _AbstractCard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractCard */ \"./src/cards/AbstractCard.ts\");\n// noinspection JSUnusedGlobalSymbols Class is dynamically imported.\n\n/**\n * Climate Card Class\n *\n * Used to create a card configuration to control an entity of the climate domain.\n */\nclass ClimateCard extends _AbstractCard__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /** Returns the default configuration object for the card. */\n    static getDefaultConfig() {\n        return {\n            type: 'custom:mushroom-climate-card',\n            icon: undefined,\n            hvac_modes: ['off', 'cool', 'heat', 'fan_only'],\n            show_temperature_control: true,\n        };\n    }\n    /**\n     * Class constructor.\n     *\n     * @param {EntityRegistryEntry} entity The HASS entity to create a card configuration for.\n     * @param {ClimateCardConfig} [customConfiguration] Custom card configuration.\n     */\n    constructor(entity, customConfiguration) {\n        super(entity);\n        this.configuration = { ...this.configuration, ...ClimateCard.getDefaultConfig(), ...customConfiguration };\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ClimateCard);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/cards/ClimateCard.ts?\n}");

/***/ }),

/***/ "./src/cards/ClockWeatherCard.ts":
/*!***************************************!*\
  !*** ./src/cards/ClockWeatherCard.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _AbstractCard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractCard */ \"./src/cards/AbstractCard.ts\");\n// noinspection JSUnusedGlobalSymbols Class is dynamically imported.\n\n/**\n * Clock Weather Card Class\n *\n * Used to create a card configuration to view weather with a clock weather card.\n */\nclass ClockWeatherCard extends _AbstractCard__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /** Returns the default configuration object for the card. */\n    static getDefaultConfig() {\n        return {\n            type: 'custom:clock-weather-card',\n            icon: undefined,\n            forecast_rows: 8,\n            show_humidity: true,\n            hide_date: true,\n        };\n    }\n    /**\n     * Class constructor.\n     *\n     * @param {EntityRegistryEntry} entity The HASS entity to create a card configuration for.\n     * @param {EntityCardConfig} [customConfiguration] Custom card configuration.\n     */\n    constructor(entity, customConfiguration) {\n        super(entity);\n        this.configuration = { ...this.configuration, ...ClockWeatherCard.getDefaultConfig(), ...customConfiguration };\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ClockWeatherCard);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/cards/ClockWeatherCard.ts?\n}");

/***/ }),

/***/ "./src/cards/CoverCard.ts":
/*!********************************!*\
  !*** ./src/cards/CoverCard.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _AbstractCard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractCard */ \"./src/cards/AbstractCard.ts\");\n// noinspection JSUnusedGlobalSymbols Class is dynamically imported.\n\n/**\n * Cover Card Class\n *\n * Used to create a card configuration to control an entity of the cover domain.\n */\nclass CoverCard extends _AbstractCard__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /** Returns the default configuration object for the card. */\n    static getDefaultConfig() {\n        return {\n            type: 'custom:mushroom-cover-card',\n            icon: undefined,\n            show_buttons_control: true,\n            show_position_control: true,\n            show_tilt_position_control: true,\n        };\n    }\n    /**\n     * Class constructor.\n     *\n     * @param {EntityRegistryEntry} entity The HASS entity to create a card configuration for.\n     * @param {CoverCardConfig} [customConfiguration] Custom card configuration.\n     */\n    constructor(entity, customConfiguration) {\n        super(entity);\n        this.configuration = { ...this.configuration, ...CoverCard.getDefaultConfig(), ...customConfiguration };\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CoverCard);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/cards/CoverCard.ts?\n}");

/***/ }),

/***/ "./src/cards/ExpanderCard.ts":
/*!***********************************!*\
  !*** ./src/cards/ExpanderCard.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _AbstractCard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractCard */ \"./src/cards/AbstractCard.ts\");\n\n/**\n * Expander Card Class\n *\n * Used to create a card configuration for an Expander card.\n */\nclass ExpanderCard extends _AbstractCard__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /** Returns the default configuration object for the card. */\n    static getDefaultConfig() {\n        return {\n            type: \"custom:expander-card\",\n            expanded: false,\n        };\n    }\n    /**\n     * Class constructor.\n     *\n     * @param {ExpanderCardConfig} [customConfiguration] Custom card configuration.\n     */\n    constructor(customConfiguration) {\n        super();\n        this.configuration = { ...this.configuration,\n            ...ExpanderCard.getDefaultConfig(),\n            ...customConfiguration,\n        };\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ExpanderCard);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/cards/ExpanderCard.ts?\n}");

/***/ }),

/***/ "./src/cards/FanCard.ts":
/*!******************************!*\
  !*** ./src/cards/FanCard.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _AbstractCard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractCard */ \"./src/cards/AbstractCard.ts\");\n// noinspection JSUnusedGlobalSymbols Class is dynamically imported.\n\n/**\n * Fan Card Class\n *\n * Used to create a card configuration to control an entity of the fan domain.\n */\nclass FanCard extends _AbstractCard__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /** Returns the default configuration object for the card. */\n    static getDefaultConfig() {\n        return {\n            type: 'custom:mushroom-fan-card',\n            icon: undefined,\n            show_percentage_control: true,\n            show_oscillate_control: true,\n            icon_animation: true,\n        };\n    }\n    /**\n     * Class constructor.\n     *\n     * @param {EntityRegistryEntry} entity The HASS entity to create a card configuration for.\n     * @param {FanCardConfig} [customConfiguration] Custom card configuration.\n     */\n    constructor(entity, customConfiguration) {\n        super(entity);\n        this.configuration = { ...this.configuration, ...FanCard.getDefaultConfig(), ...customConfiguration };\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FanCard);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/cards/FanCard.ts?\n}");

/***/ }),

/***/ "./src/cards/GridCard.ts":
/*!*******************************!*\
  !*** ./src/cards/GridCard.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _AbstractCard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractCard */ \"./src/cards/AbstractCard.ts\");\n\n/**\n * Grid Card Class\n *\n * Used to create a card configuration for a Grid card.\n */\nclass GridCard extends _AbstractCard__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /** Returns the default configuration object for the card. */\n    static getDefaultConfig() {\n        return {\n            type: 'grid',\n            square: false,\n            columns: 1,\n            cards: [],\n        };\n    }\n    /**\n     * Class constructor.\n     *\n     * @param {any} entity The entity or data to create a heading card for.\n     * @param {GridCardConfig} [customConfiguration] Custom card configuration.\n     */\n    constructor(customConfiguration) {\n        super();\n        this.configuration = { ...this.configuration, ...GridCard.getDefaultConfig(), ...customConfiguration };\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GridCard);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/cards/GridCard.ts?\n}");

/***/ }),

/***/ "./src/cards/HeaderCard.ts":
/*!*********************************!*\
  !*** ./src/cards/HeaderCard.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Header Card class.\n *\n * Used to create a card configuration for a Header Card.\n * The card can be used to describe a group of cards and optionally to control multiple entities.\n */\nclass HeaderCard {\n    /** Returns the default configuration object for the card. */\n    static getDefaultConfig() {\n        return {\n            type: 'custom:mushroom-title-card',\n            iconOn: 'mdi:power-on',\n            iconOff: 'mdi:power-off',\n            onService: 'none',\n            offService: 'none',\n        };\n    }\n    /**\n     * Class constructor.\n     *\n     * @param {HassServiceTarget} target The target which is optionally controlled by the card.\n     * @param {CustomHeaderCardConfig} [customConfiguration] Custom card configuration.\n     *\n     * @remarks\n     * The target object can contain one or multiple ids of different entry types.\n     */\n    constructor(target, customConfiguration) {\n        this.target = target;\n        this.configuration = { ...HeaderCard.getDefaultConfig(), ...customConfiguration };\n    }\n    /**\n     * Create a Header card configuration.\n     *\n     * @remarks\n     * The card is represented by a horizontal stack of cards.\n     * One title card and optionally two template cards to control entities.\n     */\n    createCard() {\n        // Create a title card.\n        const cards = [\n            {\n                type: 'custom:mushroom-title-card',\n                title: this.configuration.title,\n                subtitle: this.configuration.subtitle,\n            },\n        ];\n        // Add controls to the card.\n        if (this.configuration.showControls) {\n            cards.push({\n                type: 'horizontal-stack',\n                cards: [\n                    {\n                        type: 'custom:mushroom-template-card',\n                        icon: this.configuration.iconOff,\n                        layout: 'vertical',\n                        icon_color: 'red',\n                        tap_action: {\n                            action: 'call-service',\n                            service: this.configuration.offService,\n                            target: this.target,\n                            data: {},\n                        },\n                    },\n                    {\n                        type: 'custom:mushroom-template-card',\n                        icon: this.configuration.iconOn,\n                        layout: 'vertical',\n                        icon_color: 'amber',\n                        tap_action: {\n                            action: 'call-service',\n                            service: this.configuration.onService,\n                            target: this.target,\n                            data: {},\n                        },\n                    },\n                ],\n            });\n        }\n        return {\n            type: 'horizontal-stack',\n            cards: cards,\n        };\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (HeaderCard);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/cards/HeaderCard.ts?\n}");

/***/ }),

/***/ "./src/cards/HeadingCard.ts":
/*!**********************************!*\
  !*** ./src/cards/HeadingCard.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _AbstractCard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractCard */ \"./src/cards/AbstractCard.ts\");\n\n/**\n * Heading Card Class\n *\n * Used to create a card configuration for a heading/title card.\n */\nclass HeadingCard extends _AbstractCard__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /** Returns the default configuration object for the card. */\n    static getDefaultConfig() {\n        return {\n            type: 'heading',\n            heading_style: 'title',\n        };\n    }\n    /**\n     * Class constructor.\n     *\n     * @param {any} entity The entity or data to create a heading card for.\n     * @param {HeadingCardConfig} [customConfiguration] Custom card configuration.\n     */\n    constructor(entity, customConfiguration) {\n        super(entity);\n        this.configuration = { ...this.configuration, ...HeadingCard.getDefaultConfig(), ...customConfiguration };\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (HeadingCard);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/cards/HeadingCard.ts?\n}");

/***/ }),

/***/ "./src/cards/HorizontalStackCard.ts":
/*!******************************************!*\
  !*** ./src/cards/HorizontalStackCard.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _AbstractCard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractCard */ \"./src/cards/AbstractCard.ts\");\n\n/**\n * Horizontal Stack Card Class\n *\n * Used to create a card configuration for a Horizontal Stack card.\n */\nclass HorizontalStackCard extends _AbstractCard__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /** Returns the default configuration object for the card. */\n    static getDefaultConfig() {\n        return {\n            type: 'horizontal-stack',\n            cards: [],\n        };\n    }\n    /**\n     * Class constructor.\n     *\n     * @param {HorizontalStackCardConfig} [customConfiguration] Custom card configuration.\n     */\n    constructor(customConfiguration) {\n        super();\n        this.configuration = { ...this.configuration, ...HorizontalStackCard.getDefaultConfig(), ...customConfiguration };\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (HorizontalStackCard);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/cards/HorizontalStackCard.ts?\n}");

/***/ }),

/***/ "./src/cards/LightCard.ts":
/*!********************************!*\
  !*** ./src/cards/LightCard.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _types_strategy_strategy_generics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types/strategy/strategy-generics */ \"./src/types/strategy/strategy-generics.ts\");\n/* harmony import */ var _AbstractCard__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AbstractCard */ \"./src/cards/AbstractCard.ts\");\n// noinspection JSUnusedGlobalSymbols Class is dynamically imported.\n\n\n/**\n * Light Card Class\n *\n * Used to create a card configuration to control an entity of the light domain.\n */\nclass LightCard extends _AbstractCard__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    /** Returns the default configuration object for the card. */\n    static getDefaultConfig() {\n        return {\n            type: 'custom:mushroom-light-card',\n            icon: undefined,\n            show_brightness_control: true,\n            show_color_control: true,\n            show_color_temp_control: true,\n            use_light_color: true,\n            double_tap_action: {\n                action: 'call-service',\n                perform_action: 'light.turn_on',\n                target: {\n                    entity_id: undefined,\n                },\n                data: {\n                    rgb_color: [255, 255, 255],\n                },\n            },\n        };\n    }\n    /**\n     * Class constructor.\n     *\n     * @param {EntityRegistryEntry} entity The HASS entity to create a card configuration for.\n     * @param {LightCardConfig} [customConfiguration] Custom card configuration.\n     */\n    constructor(entity, customConfiguration) {\n        super(entity);\n        const configuration = LightCard.getDefaultConfig();\n        if ((0,_types_strategy_strategy_generics__WEBPACK_IMPORTED_MODULE_0__.isCallServiceActionConfig)(configuration.double_tap_action)) {\n            configuration.double_tap_action.target = { entity_id: entity.entity_id };\n        }\n        this.configuration = { ...this.configuration, ...configuration, ...customConfiguration };\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LightCard);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/cards/LightCard.ts?\n}");

/***/ }),

/***/ "./src/cards/LockCard.ts":
/*!*******************************!*\
  !*** ./src/cards/LockCard.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _AbstractCard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractCard */ \"./src/cards/AbstractCard.ts\");\n// noinspection JSUnusedGlobalSymbols Class is dynamically imported.\n\n/**\n * Lock Card Class\n *\n * Used to create a card configuration to control an entity of the lock domain.\n */\nclass LockCard extends _AbstractCard__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /** Returns the default configuration object for the card. */\n    static getDefaultConfig() {\n        return {\n            type: 'custom:mushroom-lock-card',\n            icon: undefined,\n        };\n    }\n    /**\n     * Class constructor.\n     *\n     * @param {EntityRegistryEntry} entity The HASS entity to create a card configuration for.\n     * @param {LockCardConfig} [customConfiguration] Custom card configuration.\n     */\n    constructor(entity, customConfiguration) {\n        super(entity);\n        this.configuration = { ...this.configuration, ...LockCard.getDefaultConfig(), ...customConfiguration };\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LockCard);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/cards/LockCard.ts?\n}");

/***/ }),

/***/ "./src/cards/MiscellaneousCard.ts":
/*!****************************************!*\
  !*** ./src/cards/MiscellaneousCard.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _AbstractCard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractCard */ \"./src/cards/AbstractCard.ts\");\n\n/**\n * Miscellaneous Card Class\n *\n * Used to create a card configuration to control an entity of any domain.\n */\nclass MiscellaneousCard extends _AbstractCard__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /** Returns the default configuration object for the card. */\n    static getDefaultConfig() {\n        return {\n            type: 'custom:mushroom-entity-card',\n            icon_color: 'blue-grey',\n        };\n    }\n    /**\n     * Class constructor.\n     *\n     * @param {EntityRegistryEntry} entity The HASS entity to create a card configuration for.\n     * @param {EntityCardConfig} [customConfiguration] Custom card configuration.\n     */\n    constructor(entity, customConfiguration) {\n        super(entity);\n        this.configuration = { ...this.configuration, ...MiscellaneousCard.getDefaultConfig(), ...customConfiguration };\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MiscellaneousCard);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/cards/MiscellaneousCard.ts?\n}");

/***/ }),

/***/ "./src/cards/PersonCard.ts":
/*!*********************************!*\
  !*** ./src/cards/PersonCard.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _AbstractCard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractCard */ \"./src/cards/AbstractCard.ts\");\n\n/**\n * Person Card Class\n *\n * Used to create a card configuration to control an entity of the person domain.\n */\nclass PersonCard extends _AbstractCard__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /** Returns the default configuration object for the card. */\n    static getDefaultConfig() {\n        return {\n            type: 'custom:mushroom-person-card',\n            layout: 'vertical',\n            primary_info: 'none',\n            secondary_info: 'none',\n            icon_type: 'entity-picture',\n        };\n    }\n    /**\n     * Class constructor.\n     *\n     * @param {EntityRegistryEntry} entity The HASS entity to create a card configuration for.\n     * @param {PersonCardConfig} [customConfiguration] Custom card configuration.\n     */\n    constructor(entity, customConfiguration) {\n        super(entity);\n        this.configuration = { ...this.configuration, ...PersonCard.getDefaultConfig(), ...customConfiguration };\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PersonCard);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/cards/PersonCard.ts?\n}");

/***/ }),

/***/ "./src/cards/SceneCard.ts":
/*!********************************!*\
  !*** ./src/cards/SceneCard.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Registry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Registry */ \"./src/Registry.ts\");\n/* harmony import */ var _AbstractCard__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AbstractCard */ \"./src/cards/AbstractCard.ts\");\n/* harmony import */ var _SwitchCard__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SwitchCard */ \"./src/cards/SwitchCard.ts\");\n/* harmony import */ var _types_strategy_strategy_generics__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../types/strategy/strategy-generics */ \"./src/types/strategy/strategy-generics.ts\");\n// noinspection JSUnusedGlobalSymbols Class is dynamically imported.\n\n\n\n\n/**\n * Scene Card Class\n *\n * Used to create a card configuration to control an entity of the scene domain.\n *\n * Supports Stateful scenes from https://github.com/hugobloem/stateful_scenes.\n * If the stateful scene entity is available, it will be used instead of the original scene entity.\n */\nclass SceneCard extends _AbstractCard__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    /** Returns the default configuration object for the card. */\n    static getDefaultConfig() {\n        return {\n            type: 'custom:mushroom-entity-card',\n            tap_action: {\n                action: 'perform-action',\n                perform_action: 'scene.turn_on',\n                target: {},\n            },\n        };\n    }\n    /**\n     * Class constructor.\n     *\n     * @param {EntityRegistryEntry} entity The HASS entity to create a card configuration for.\n     * @param {EntityCardConfig} [customConfiguration] Custom card configuration.\n     */\n    constructor(entity, customConfiguration) {\n        const sceneName = entity.entity_id.split('.').pop();\n        const statefulScene = _Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.entities.find((entity) => entity.entity_id === `switch.${sceneName}_stateful_scene`);\n        super(statefulScene ?? entity);\n        // Stateful scene support.\n        if (statefulScene) {\n            this.configuration = new _SwitchCard__WEBPACK_IMPORTED_MODULE_2__[\"default\"](statefulScene).getCard();\n            return;\n        }\n        // Initialize the default configuration.\n        const configuration = SceneCard.getDefaultConfig();\n        if ((0,_types_strategy_strategy_generics__WEBPACK_IMPORTED_MODULE_3__.isCallServiceActionConfig)(configuration.tap_action)) {\n            configuration.tap_action.target = { entity_id: entity.entity_id };\n        }\n        configuration.icon = _Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.hassStates[entity.entity_id]?.attributes.icon ?? configuration.icon;\n        this.configuration = { ...this.configuration, ...configuration, ...customConfiguration };\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SceneCard);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/cards/SceneCard.ts?\n}");

/***/ }),

/***/ "./src/cards/SensorCard.ts":
/*!*********************************!*\
  !*** ./src/cards/SensorCard.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _AbstractCard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractCard */ \"./src/cards/AbstractCard.ts\");\n\n/**\n * Sensor Card Class\n *\n * Used to create a card for controlling an entity of the sensor domain.\n */\nclass SensorCard extends _AbstractCard__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /** Returns the default configuration object for the card. */\n    static getDefaultConfig() {\n        return {\n            type: 'custom:mushroom-entity-card',\n            icon: 'mdi:information',\n            animate: true,\n            line_color: 'green',\n        };\n    }\n    /**\n     * Class constructor.\n     *\n     * @param {EntityRegistryEntry} entity The HASS entity to create a card configuration for.\n     * @param {EntityCardConfig} [customConfiguration] Custom card configuration.\n     */\n    constructor(entity, customConfiguration) {\n        super(entity);\n        this.configuration = { ...this.configuration, ...SensorCard.getDefaultConfig(), ...customConfiguration };\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SensorCard);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/cards/SensorCard.ts?\n}");

/***/ }),

/***/ "./src/cards/SwitchCard.ts":
/*!*********************************!*\
  !*** ./src/cards/SwitchCard.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _AbstractCard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractCard */ \"./src/cards/AbstractCard.ts\");\n// noinspection JSUnusedGlobalSymbols Class is dynamically imported.\n\n/**\n * Switch Card Class\n *\n * Used to create a card configuration to control an entity of the switch domain.\n */\nclass SwitchCard extends _AbstractCard__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /** Returns the default configuration object for the card. */\n    static getDefaultConfig() {\n        return {\n            type: 'custom:mushroom-entity-card',\n            icon: undefined,\n            tap_action: {\n                action: 'toggle',\n            },\n        };\n    }\n    /**\n     * Class constructor.\n     *\n     * @param {EntityRegistryEntry} entity The HASS entity to create a card configuration for.\n     * @param {EntityCardConfig} [customConfiguration] Custom card configuration.\n     */\n    constructor(entity, customConfiguration) {\n        super(entity);\n        this.configuration = { ...this.configuration, ...SwitchCard.getDefaultConfig(), ...customConfiguration };\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SwitchCard);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/cards/SwitchCard.ts?\n}");

/***/ }),

/***/ "./src/cards/TileCard.ts":
/*!*******************************!*\
  !*** ./src/cards/TileCard.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _AbstractCard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractCard */ \"./src/cards/AbstractCard.ts\");\n// noinspection JSUnusedGlobalSymbols Class is dynamically imported.\n\n/**\n * Tile Card Class\n *\n * Used to create a card configuration to control an entity using a tile card.\n */\nclass TileCard extends _AbstractCard__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /** Returns the default configuration object for the card. */\n    static getDefaultConfig() {\n        return {\n            type: 'tile',\n            // tap_action: {\n            //   action: 'toggle',\n            // },\n        };\n    }\n    /**\n     * Class constructor.\n     *\n     * @param {EntityRegistryEntry} entity The HASS entity to create a card configuration for.\n     * @param {EntityCardConfig} [customConfiguration] Custom card configuration.\n     */\n    constructor(entity, customConfiguration) {\n        super(entity);\n        this.configuration = { ...this.configuration, ...TileCard.getDefaultConfig(), ...customConfiguration };\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (TileCard);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/cards/TileCard.ts?\n}");

/***/ }),

/***/ "./src/cards/VacuumCard.ts":
/*!*********************************!*\
  !*** ./src/cards/VacuumCard.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _types_lovelace_cards_mushroom_vacuum_card_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types/lovelace/cards/mushroom/vacuum-card-config */ \"./src/types/lovelace/cards/mushroom/vacuum-card-config.ts\");\n/* harmony import */ var _AbstractCard__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AbstractCard */ \"./src/cards/AbstractCard.ts\");\n// noinspection JSUnusedGlobalSymbols Class is dynamically imported.\n\n\n/**\n * Vacuum Card Class\n *\n * Used to create a card configuration to control an entity of the vacuum domain.\n */\nclass VacuumCard extends _AbstractCard__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    /** Returns the default configuration object for the card. */\n    static getDefaultConfig() {\n        return {\n            type: 'custom:mushroom-vacuum-card',\n            icon: undefined,\n            icon_animation: true,\n            commands: [..._types_lovelace_cards_mushroom_vacuum_card_config__WEBPACK_IMPORTED_MODULE_0__.VACUUM_COMMANDS],\n            tap_action: {\n                action: 'more-info',\n            },\n        };\n    }\n    /**\n     * Class constructor.\n     *\n     * @param {EntityRegistryEntry} entity The HASS entity to create a card configuration for.\n     * @param {VacuumCardConfig} [customConfiguration] Custom card configuration.\n     */\n    constructor(entity, customConfiguration) {\n        super(entity);\n        this.configuration = { ...this.configuration, ...VacuumCard.getDefaultConfig(), ...customConfiguration };\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (VacuumCard);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/cards/VacuumCard.ts?\n}");

/***/ }),

/***/ "./src/cards/ValveCard.ts":
/*!********************************!*\
  !*** ./src/cards/ValveCard.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _utilities_localize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/localize */ \"./src/utilities/localize.ts\");\n/* harmony import */ var _AbstractCard__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AbstractCard */ \"./src/cards/AbstractCard.ts\");\n// noinspection JSUnusedGlobalSymbols Class is dynamically imported.\n\n\n/**\n * Valve Card Class\n *\n * Used to create a card configuration to control an entity of the valve domain.\n */\nclass ValveCard extends _AbstractCard__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    /** Returns the default configuration object for the card. */\n    static getDefaultConfig() {\n        return {\n            type: 'custom:mushroom-template-card',\n            icon: 'mdi:valve',\n            icon_color: 'blue',\n            double_tap_action: {\n                action: 'toggle',\n            },\n        };\n    }\n    /**\n     * Class constructor.\n     *\n     * @param {EntityRegistryEntry} entity The HASS entity to create a card configuration for.\n     * @param {VacuumCardConfig} [customConfiguration] Custom card configuration.\n     */\n    constructor(entity, customConfiguration) {\n        super(entity);\n        // Initialize the default configuration.\n        const configuration = ValveCard.getDefaultConfig();\n        configuration.entity = entity.entity_id;\n        configuration.icon = entity.icon ?? configuration.icon;\n        configuration.primary = entity.name ?? entity.original_name ?? '?';\n        configuration.secondary = `{% \n                                 set mapping = {\n                                   'open': '${(0,_utilities_localize__WEBPACK_IMPORTED_MODULE_0__.localize)('valve.open')}',\n                                   'opening': '${(0,_utilities_localize__WEBPACK_IMPORTED_MODULE_0__.localize)('valve.opening')}',\n                                   'closed': '${(0,_utilities_localize__WEBPACK_IMPORTED_MODULE_0__.localize)('valve.closed')}',\n                                   'closing': '${(0,_utilities_localize__WEBPACK_IMPORTED_MODULE_0__.localize)('valve.closing')}',\n                                   'stopped': '${(0,_utilities_localize__WEBPACK_IMPORTED_MODULE_0__.localize)('valve.stopped')}',\n                                   'unavailable': '${(0,_utilities_localize__WEBPACK_IMPORTED_MODULE_0__.localize)('generic.unavailable')}'\n                                 }\n                               %}\n                               {{ mapping.get(states('${entity.entity_id}'), '${(0,_utilities_localize__WEBPACK_IMPORTED_MODULE_0__.localize)('generic.unknown')}') }}`;\n        this.configuration = { ...this.configuration, ...configuration, ...customConfiguration };\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ValveCard);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/cards/ValveCard.ts?\n}");

/***/ }),

/***/ "./src/cards/WeatherRadarCard.ts":
/*!***************************************!*\
  !*** ./src/cards/WeatherRadarCard.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _AbstractCard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractCard */ \"./src/cards/AbstractCard.ts\");\n// noinspection JSUnusedGlobalSymbols Class is dynamically imported.\n\n/**\n * Weather Radar Card Class\n *\n * Used to create a card configuration to view weather radar data.\n */\nclass WeatherRadarCard extends _AbstractCard__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /** Returns the default configuration object for the card. */\n    static getDefaultConfig() {\n        return {\n            type: 'custom:weather-radar-card',\n            data_source: 'RainViewer-DarkSky',\n            zoom_level: 7,\n            static_map: false,\n            show_recenter: true,\n            show_playback: false,\n            show_marker: true,\n            map_style: 'dark'\n        };\n    }\n    /**\n     * Class constructor.\n     *\n     * @param {EntityRegistryEntry} entity The HASS entity to create a card configuration for.\n     * @param {EntityCardConfig} [customConfiguration] Custom card configuration.\n     */\n    constructor(entity, customConfiguration) {\n        super(entity);\n        this.configuration = { ...this.configuration, ...WeatherRadarCard.getDefaultConfig(), ...customConfiguration };\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WeatherRadarCard);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/cards/WeatherRadarCard.ts?\n}");

/***/ }),

/***/ "./src/configurationDefaults.ts":
/*!**************************************!*\
  !*** ./src/configurationDefaults.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConfigurationDefaults: () => (/* binding */ ConfigurationDefaults)\n/* harmony export */ });\n/* harmony import */ var _utilities_localize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utilities/localize */ \"./src/utilities/localize.ts\");\n\n/**\n * Default configuration for the strategy.\n */\nconst ConfigurationDefaults = {\n    floors: {\n        _: {\n            type: 'FloorCard',\n        },\n        undisclosed: {\n            name: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_0__.localize)('generic.undisclosed'),\n            level: null,\n            hidden: false,\n            icon: null,\n            aliases: [],\n            order: Infinity,\n            created_at: 0,\n            modified_at: 0,\n            floor_id: 'undisclosed'\n        },\n    },\n    areas: {\n        _: {\n            type: 'AreaCard',\n        },\n        undisclosed: {\n            // TODO: Refactor undisclosed to other.\n            aliases: [],\n            area_id: 'undisclosed',\n            created_at: 0,\n            floor_id: null,\n            hidden: false,\n            humidity_entity_id: null,\n            icon: null, // 'mdi:floor-plan'\n            labels: [],\n            modified_at: 0,\n            name: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_0__.localize)('generic.undisclosed'),\n            picture: null,\n            temperature_entity_id: null,\n            order: Infinity,\n        },\n    },\n    card_options: {},\n    debug: false,\n    domains: {\n        _: {\n            hide_config_entities: undefined,\n            hide_diagnostic_entities: undefined,\n            showControls: true,\n            stack_count: 1,\n        },\n        binary_sensor: {\n            title: `${(0,_utilities_localize__WEBPACK_IMPORTED_MODULE_0__.localize)('sensor.binary')} ` + (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_0__.localize)('sensor.sensors'),\n            showControls: false,\n            hidden: false,\n            stack_count: 2, // TODO: Add to wiki. also for other configurations.\n        },\n        camera: {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_0__.localize)('camera.cameras'),\n            showControls: false,\n            hidden: false,\n        },\n        climate: {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_0__.localize)('climate.climates'),\n            showControls: false,\n            hidden: false,\n        },\n        cover: {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_0__.localize)('cover.covers'),\n            iconOn: 'mdi:arrow-up',\n            iconOff: 'mdi:arrow-down',\n            onService: 'cover.open_cover',\n            offService: 'cover.close_cover',\n            hidden: false,\n        },\n        default: {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_0__.localize)('generic.miscellaneous'),\n            showControls: false,\n            hidden: false,\n        },\n        fan: {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_0__.localize)('fan.fans'),\n            iconOn: 'mdi:fan',\n            iconOff: 'mdi:fan-off',\n            onService: 'fan.turn_on',\n            offService: 'fan.turn_off',\n            hidden: false,\n        },\n        input_select: {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_0__.localize)('input_select.input_selects'),\n            showControls: false,\n            hidden: false,\n        },\n        light: {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_0__.localize)('light.lights'),\n            iconOn: 'mdi:lightbulb',\n            iconOff: 'mdi:lightbulb-off',\n            onService: 'light.turn_on',\n            offService: 'light.turn_off',\n            hidden: false,\n        },\n        lock: {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_0__.localize)('lock.locks'),\n            showControls: false,\n            hidden: false,\n        },\n        media_player: {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_0__.localize)('media_player.media_players'),\n            showControls: false,\n            hidden: false,\n        },\n        number: {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_0__.localize)('generic.numbers'),\n            showControls: false,\n            hidden: false,\n        },\n        scene: {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_0__.localize)('scene.scenes'),\n            showControls: false,\n            onService: 'scene.turn_on',\n            hidden: false,\n        },\n        select: {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_0__.localize)('select.selects'),\n            showControls: false,\n            hidden: false,\n        },\n        sensor: {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_0__.localize)('sensor.sensors'),\n            showControls: false,\n            hidden: false,\n        },\n        switch: {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_0__.localize)('switch.switches'),\n            iconOn: 'mdi:power-plug',\n            iconOff: 'mdi:power-plug-off',\n            onService: 'switch.turn_on',\n            offService: 'switch.turn_off',\n            hidden: false,\n        },\n        vacuum: {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_0__.localize)('vacuum.vacuums'),\n            iconOn: 'mdi:robot-vacuum',\n            iconOff: 'mdi:robot-vacuum-off',\n            onService: 'vacuum.start',\n            offService: 'vacuum.stop',\n            hidden: false,\n        },\n        valve: {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_0__.localize)('valve.valves'),\n            iconOn: 'mdi:valve-open',\n            iconOff: 'mdi:valve-closed',\n            onService: 'valve.open_valve',\n            offService: 'valve.close_valve',\n            hidden: false,\n        },\n    },\n    extra_cards: [],\n    extra_views: [],\n    home_view: {\n        hidden: [\n        // 'weather',\n        // 'lights_on',\n        ],\n        weather_details: {\n            hidden: false,\n            grass_pollen_entity: undefined,\n            trees_pollen_entity: undefined,\n            weeds_pollen_entity: undefined,\n        },\n        stack_count: {\n            _: 2,\n        },\n    },\n    views: {\n        camera: {\n            order: 7,\n            hidden: false,\n        },\n        climate: {\n            order: 6,\n            hidden: false,\n        },\n        cover: {\n            order: 4,\n            hidden: false,\n        },\n        fan: {\n            order: 3,\n            hidden: false,\n        },\n        home: {\n            order: 1,\n            hidden: false,\n        },\n        light: {\n            order: 2,\n            hidden: false,\n        },\n        lock: {\n            order: 10,\n            hidden: false,\n        },\n        scene: {\n            order: 9,\n            hidden: false,\n        },\n        switch: {\n            order: 5,\n            hidden: false,\n        },\n        vacuum: {\n            order: 8,\n            hidden: false,\n        },\n        valve: {\n            order: 11,\n            hidden: false,\n        },\n    },\n    quick_access_cards: [],\n};\n\n\n//# sourceURL=webpack://jetson-strategy/./src/configurationDefaults.ts?\n}");

/***/ }),

/***/ "./src/jetson-strategy.ts":
/*!********************************!*\
  !*** ./src/jetson-strategy.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JetsonStrategy: () => (/* binding */ JetsonStrategy)\n/* harmony export */ });\n/* harmony import */ var _cards_HeaderCard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cards/HeaderCard */ \"./src/cards/HeaderCard.ts\");\n/* harmony import */ var _cards_SensorCard__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cards/SensorCard */ \"./src/cards/SensorCard.ts\");\n/* harmony import */ var _Registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Registry */ \"./src/Registry.ts\");\n/* harmony import */ var _types_strategy_strategy_generics__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types/strategy/strategy-generics */ \"./src/types/strategy/strategy-generics.ts\");\n/* harmony import */ var _utilities_auxiliaries__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utilities/auxiliaries */ \"./src/utilities/auxiliaries.ts\");\n/* harmony import */ var _utilities_debug__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utilities/debug */ \"./src/utilities/debug.ts\");\n/* harmony import */ var _utilities_RegistryFilter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utilities/RegistryFilter */ \"./src/utilities/RegistryFilter.ts\");\n/* harmony import */ var _utilities_cardStacking__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utilities/cardStacking */ \"./src/utilities/cardStacking.ts\");\n\n\n\n\n\n\n\n\n// import { PersistentNotification } from './utilities/PersistentNotification';\n// import { HomeAssistant } from './types/homeassistant/types';\n// import semver from 'semver/preload';\nclass JetsonStrategy extends HTMLTemplateElement {\n    /**\n     * Generate a dashboard.\n     *\n     * This method creates views for each exposed domain and area.\n     * It also adds custom views if specified in the strategy options.\n     *\n     * @param {DashboardInfo} info Dashboard strategy information object.\n     *\n     * @remarks\n     * Called when opening a dashboard.\n     */\n    static async generateDashboard(info) {\n        await _Registry__WEBPACK_IMPORTED_MODULE_2__.Registry.initialize(info);\n        const views = [];\n        // Parallelize view imports and creation.\n        const viewPromises = _Registry__WEBPACK_IMPORTED_MODULE_2__.Registry.getExposedNames('view')\n            .filter(_types_strategy_strategy_generics__WEBPACK_IMPORTED_MODULE_3__.isSupportedView)\n            .map(async (viewName) => {\n            try {\n                const moduleName = (0,_utilities_auxiliaries__WEBPACK_IMPORTED_MODULE_4__.sanitizeClassName)(`${viewName}View`);\n                const View = (await __webpack_require__(\"./src/views lazy recursive ^\\\\.\\\\/.*$\")(`./${moduleName}`)).default;\n                const currentView = new View(_Registry__WEBPACK_IMPORTED_MODULE_2__.Registry.strategyOptions.views[viewName]);\n                const viewConfiguration = await currentView.getView();\n                if (viewConfiguration.cards.length) {\n                    return viewConfiguration;\n                }\n                (0,_utilities_debug__WEBPACK_IMPORTED_MODULE_5__.logMessage)(_utilities_debug__WEBPACK_IMPORTED_MODULE_5__.lvlInfo, `View ${viewName} has no entities available!`);\n            }\n            catch (e) {\n                (0,_utilities_debug__WEBPACK_IMPORTED_MODULE_5__.logMessage)(_utilities_debug__WEBPACK_IMPORTED_MODULE_5__.lvlError, `Error importing ${viewName} view!`, e);\n            }\n            return null;\n        });\n        const resolvedViews = (await Promise.all(viewPromises)).filter(Boolean);\n        views.push(...resolvedViews);\n        // Extra views\n        if (_Registry__WEBPACK_IMPORTED_MODULE_2__.Registry.strategyOptions.extra_views) {\n            views.push(..._Registry__WEBPACK_IMPORTED_MODULE_2__.Registry.strategyOptions.extra_views);\n            views.sort((a, b) => {\n                return (a.order ?? Infinity) - (b.order ?? Infinity) || (a.title ?? '').localeCompare(b.title ?? '');\n            });\n        }\n        // Subviews for areas\n        views.push(..._Registry__WEBPACK_IMPORTED_MODULE_2__.Registry.areas.map((area) => ({\n            title: area.name,\n            path: area.area_id,\n            subview: true,\n            hidden: area.hidden ?? false,\n            order: area.order ?? Infinity,\n            strategy: {\n                type: 'custom:jetson-strategy',\n                options: { area },\n            },\n        })));\n        return { views };\n    }\n    /**\n     * Generate a view.\n     *\n     * The method creates cards for each domain (e.g., sensors, switches, etc.) in the current area, using a combination\n     * of Header cards and entity-specific cards.\n     * It also handles miscellaneous entities that don't fit into any supported domain.\n     *\n     * @param {ViewInfo} info The view's strategy information object.\n     *\n     * @remarks\n     * Called upon opening a subview.\n     */\n    static async generateView(info) {\n        const exposedDomainNames = _Registry__WEBPACK_IMPORTED_MODULE_2__.Registry.getExposedNames('domain');\n        const area = info.view.strategy?.options?.area ?? {};\n        const areaEntities = new _utilities_RegistryFilter__WEBPACK_IMPORTED_MODULE_6__[\"default\"](_Registry__WEBPACK_IMPORTED_MODULE_2__.Registry.entities).whereAreaId(area.area_id).toList();\n        const viewCards = [...(area.extra_cards ?? [])];\n        // Set the target for any Header card to the current area.\n        const target = { area_id: [area.area_id] };\n        // Prepare promises for all supported domains\n        const domainCardPromises = exposedDomainNames.filter(_types_strategy_strategy_generics__WEBPACK_IMPORTED_MODULE_3__.isSupportedDomain).map(async (domain) => {\n            const moduleName = (0,_utilities_auxiliaries__WEBPACK_IMPORTED_MODULE_4__.sanitizeClassName)(domain + 'Card');\n            const entities = new _utilities_RegistryFilter__WEBPACK_IMPORTED_MODULE_6__[\"default\"](areaEntities)\n                .whereDomain(domain)\n                .where((entity) => !(domain === 'switch' && entity.entity_id.endsWith('_stateful_scene')))\n                .toList();\n            if (!entities.length) {\n                return null;\n            }\n            const headerCard = new _cards_HeaderCard__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({ entity_id: entities.map((entity) => entity.entity_id) }, {\n                ..._Registry__WEBPACK_IMPORTED_MODULE_2__.Registry.strategyOptions.domains['_'],\n                ..._Registry__WEBPACK_IMPORTED_MODULE_2__.Registry.strategyOptions.domains[domain],\n            }).createCard();\n            try {\n                const DomainCard = (await __webpack_require__(\"./src/cards lazy recursive ^\\\\.\\\\/.*$\")(`./${moduleName}`)).default;\n                if (domain === 'sensor') {\n                    let domainCards = entities\n                        .filter((entity) => _Registry__WEBPACK_IMPORTED_MODULE_2__.Registry.hassStates[entity.entity_id]?.attributes.unit_of_measurement)\n                        .map((entity) => {\n                        const options = {\n                            ...(entity.device_id && _Registry__WEBPACK_IMPORTED_MODULE_2__.Registry.strategyOptions.card_options?.[entity.device_id]),\n                            ..._Registry__WEBPACK_IMPORTED_MODULE_2__.Registry.strategyOptions.card_options?.[entity.entity_id],\n                            type: 'custom:mini-graph-card',\n                            entities: [entity.entity_id],\n                        };\n                        return new _cards_SensorCard__WEBPACK_IMPORTED_MODULE_1__[\"default\"](entity, options).getCard();\n                    });\n                    if (domainCards.length) {\n                        domainCards = (0,_utilities_cardStacking__WEBPACK_IMPORTED_MODULE_7__.stackHorizontal)(domainCards, _Registry__WEBPACK_IMPORTED_MODULE_2__.Registry.strategyOptions.domains[domain].stack_count ?? _Registry__WEBPACK_IMPORTED_MODULE_2__.Registry.strategyOptions.domains['_'].stack_count);\n                        return { type: 'vertical-stack', cards: [headerCard, ...domainCards] };\n                    }\n                    return null;\n                }\n                let domainCards = entities.map((entity) => {\n                    const cardOptions = {\n                        ...(entity.device_id && _Registry__WEBPACK_IMPORTED_MODULE_2__.Registry.strategyOptions.card_options?.[entity.device_id]),\n                        ..._Registry__WEBPACK_IMPORTED_MODULE_2__.Registry.strategyOptions.card_options?.[entity.entity_id],\n                    };\n                    return new DomainCard(entity, cardOptions).getCard();\n                });\n                domainCards = (0,_utilities_cardStacking__WEBPACK_IMPORTED_MODULE_7__.stackHorizontal)(domainCards, _Registry__WEBPACK_IMPORTED_MODULE_2__.Registry.strategyOptions.domains[domain].stack_count ?? _Registry__WEBPACK_IMPORTED_MODULE_2__.Registry.strategyOptions.domains['_'].stack_count);\n                return domainCards.length ? { type: 'vertical-stack', cards: [headerCard, ...domainCards] } : null;\n            }\n            catch (e) {\n                (0,_utilities_debug__WEBPACK_IMPORTED_MODULE_5__.logMessage)(_utilities_debug__WEBPACK_IMPORTED_MODULE_5__.lvlError, `Error creating card configurations for domain ${domain}`, e);\n                return null;\n            }\n        });\n        // Await all domain card stacks\n        const domainCardStacks = (await Promise.all(domainCardPromises)).filter(Boolean);\n        viewCards.push(...domainCardStacks);\n        // Miscellaneous domain\n        if (!_Registry__WEBPACK_IMPORTED_MODULE_2__.Registry.strategyOptions.domains.default.hidden) {\n            const miscellaneousEntities = new _utilities_RegistryFilter__WEBPACK_IMPORTED_MODULE_6__[\"default\"](areaEntities)\n                .not()\n                .where((entity) => (0,_types_strategy_strategy_generics__WEBPACK_IMPORTED_MODULE_3__.isSupportedDomain)(entity.entity_id.split('.', 1)[0]))\n                .toList();\n            if (miscellaneousEntities.length) {\n                try {\n                    const MiscellaneousCard = (await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cards/MiscellaneousCard */ \"./src/cards/MiscellaneousCard.ts\"))).default;\n                    let miscellaneousCards = miscellaneousEntities.map((entity) => new MiscellaneousCard(entity, _Registry__WEBPACK_IMPORTED_MODULE_2__.Registry.strategyOptions.card_options?.[entity.entity_id]).getCard());\n                    const headerCard = new _cards_HeaderCard__WEBPACK_IMPORTED_MODULE_0__[\"default\"](target, {\n                        ..._Registry__WEBPACK_IMPORTED_MODULE_2__.Registry.strategyOptions.domains['_'],\n                        ..._Registry__WEBPACK_IMPORTED_MODULE_2__.Registry.strategyOptions.domains['default'],\n                    }).createCard();\n                    if (miscellaneousCards.length) {\n                        miscellaneousCards = (0,_utilities_cardStacking__WEBPACK_IMPORTED_MODULE_7__.stackHorizontal)(miscellaneousCards, _Registry__WEBPACK_IMPORTED_MODULE_2__.Registry.strategyOptions.domains['default'].stack_count ??\n                            _Registry__WEBPACK_IMPORTED_MODULE_2__.Registry.strategyOptions.domains['_'].stack_count);\n                        viewCards.push({\n                            type: 'vertical-stack',\n                            cards: [headerCard, ...miscellaneousCards],\n                        });\n                    }\n                }\n                catch (e) {\n                    (0,_utilities_debug__WEBPACK_IMPORTED_MODULE_5__.logMessage)(_utilities_debug__WEBPACK_IMPORTED_MODULE_5__.lvlError, 'Error creating card configurations for domain `miscellaneous`', e);\n                }\n            }\n        }\n        return { cards: viewCards };\n    }\n}\ncustomElements.define('ll-strategy-dashboard-jetson-strategy', JetsonStrategy);\nconst STRATEGY_VERSION = 'v1.0.0';\nconsole.info('%c Jetson Strategy %c '.concat(STRATEGY_VERSION, ' '), 'color: white; background: coral; font-weight: 700;', 'color: coral; background: white; font-weight: 700;');\n\n\n//# sourceURL=webpack://jetson-strategy/./src/jetson-strategy.ts?\n}");

/***/ }),

/***/ "./src/translations/en.json":
/*!**********************************!*\
  !*** ./src/translations/en.json ***!
  \**********************************/
/***/ ((module) => {

"use strict";
eval("{module.exports = /*#__PURE__*/JSON.parse('{\"camera\":{\"all_cameras\":\"All Cameras\",\"cameras\":\"Cameras\"},\"climate\":{\"all_climates\":\"All Climates\",\"climates\":\"Climates\"},\"cover\":{\"all_covers\":\"All Covers\",\"covers\":\"Covers\"},\"fan\":{\"all_fans\":\"All Fans\",\"fans\":\"Fans\"},\"generic\":{\"all\":\"All\",\"areas\":\"Areas\",\"busy\":\"Busy\",\"good_afternoon\":\"Good afternoon\",\"good_evening\":\"Good evening\",\"good_morning\":\"Good morning\",\"hello\":\"Hello\",\"home\":\"Home\",\"miscellaneous\":\"Miscellaneous\",\"numbers\":\"Numbers\",\"off\":\"Off\",\"on\":\"On\",\"open\":\"Open\",\"unavailable\":\"Unavailable\",\"unclosed\":\"Unclosed\",\"undisclosed\":\"Other\",\"unknown\":\"Unknown\"},\"input_select\":{\"input_selects\":\"Input Selects\"},\"light\":{\"all_lights\":\"All Lights\",\"lights\":\"Lights\",\"lights_on_right_now\":\"Lights On Right Now\"},\"lock\":{\"all_locks\":\"All Locks\",\"locked\":\"Locked\",\"locks\":\"Locks\",\"unlocked\":\"Unlocked\"},\"media_player\":{\"media_players\":\"Media Players\"},\"scene\":{\"scenes\":\"Scenes\"},\"select\":{\"selects\":\"Selects\"},\"sensor\":{\"binary\":\"Binary\",\"sensors\":\"Sensors\"},\"switch\":{\"all_switches\":\"All Switches\",\"switches\":\"Switches\"},\"vacuum\":{\"all_vacuums\":\"All Vacuums\",\"vacuums\":\"Vacuums\"},\"valve\":{\"all_valves\":\"All Valves\",\"valves\":\"Valves\",\"open\":\"Open\",\"opening\":\"Opening\",\"closed\":\"Closed\",\"closing\":\"Closing\",\"stopped\":\"Stopped\",\"unclosed\":\"Unclosed\"},\"weather\":{\"weather\":\"Weather\",\"details\":\"Details\",\"grass_pollen\":\"Grass Pollen\",\"trees_pollen\":\"Trees Pollen\",\"weeds_pollen\":\"Weeds Pollen\"}}');\n\n//# sourceURL=webpack://jetson-strategy/./src/translations/en.json?\n}");

/***/ }),

/***/ "./src/translations/es.json":
/*!**********************************!*\
  !*** ./src/translations/es.json ***!
  \**********************************/
/***/ ((module) => {

"use strict";
eval("{module.exports = /*#__PURE__*/JSON.parse('{\"camera\":{\"all_cameras\":\"Todas las Cámaras\",\"cameras\":\"Cámaras\"},\"climate\":{\"all_climates\":\"Todos los Termostatos\",\"climates\":\"Termostatos\"},\"cover\":{\"all_covers\":\"Todas las Cubiertas\",\"covers\":\"Cubiertas\"},\"fan\":{\"all_fans\":\"Todos los Ventiladores\",\"fans\":\"Ventiladores\"},\"generic\":{\"all\":\"Todo\",\"areas\":\"Áreas\",\"busy\":\"Ocupado\",\"good_afternoon\":\"Buenas tardes\",\"good_evening\":\"Buenas noches\",\"good_morning\":\"Buenos días\",\"hello\":\"Hola\",\"home\":\"Inicio\",\"miscellaneous\":\"Varios\",\"numbers\":\"Números\",\"off\":\"Apagado\",\"on\":\"Encendido\",\"open\":\"Abierto\",\"unavailable\":\"No Disponible\",\"unclosed\":\"Sin Cerrar\",\"undisclosed\":\"Varios\",\"unknown\":\"Desconocido\"},\"input_select\":{\"input_selects\":\"Selecciones de Entrada\"},\"light\":{\"all_lights\":\"Todas las Luces\",\"lights\":\"Luces\",\"lights_on_right_now\":\"Luces encendidas en este momento\"},\"lock\":{\"all_locks\":\"Todas las Candados\",\"locked\":\"Locked\",\"locks\":\"Candados\",\"unlocked\":\"Desbloqueado\"},\"media_player\":{\"media_players\":\"Reproductores Multimedia\"},\"scene\":{\"scenes\":\"Scenas\"},\"select\":{\"selects\":\"Seleccionar\"},\"sensor\":{\"binary\":\"Binario\",\"sensors\":\"Sensores\"},\"switch\":{\"all_switches\":\"Todos los Apagadores\",\"switches\":\"Apagadores\"},\"vacuum\":{\"all_vacuums\":\"Todas las Aspiradoras\",\"vacuums\":\"Aspiradoras\"},\"valve\":{\"all_valves\":\"Todas las válvulas\",\"valves\":\"Válvulas\",\"open\":\"Abierta\",\"opening\":\"Abriendo\",\"closed\":\"Cerrada\",\"closing\":\"Cerrando\",\"stopped\":\"Detenida\",\"unclosed\":\"No Cerrada\"},\"weather\":{\"weather\":\"Clima\",\"details\":\"Detalles\",\"grass_pollen\":\"Polen de Pasto\",\"trees_pollen\":\"Polen de Árboles\",\"weeds_pollen\":\"Polen de Hierba\"}}');\n\n//# sourceURL=webpack://jetson-strategy/./src/translations/es.json?\n}");

/***/ }),

/***/ "./src/types/lovelace/cards/mushroom/vacuum-card-config.ts":
/*!*****************************************************************!*\
  !*** ./src/types/lovelace/cards/mushroom/vacuum-card-config.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VACUUM_COMMANDS: () => (/* binding */ VACUUM_COMMANDS)\n/* harmony export */ });\nconst VACUUM_COMMANDS = ['on_off', 'start_pause', 'stop', 'locate', 'clean_spot', 'return_home'];\n\n\n//# sourceURL=webpack://jetson-strategy/./src/types/lovelace/cards/mushroom/vacuum-card-config.ts?\n}");

/***/ }),

/***/ "./src/types/strategy/strategy-generics.ts":
/*!*************************************************!*\
  !*** ./src/types/strategy/strategy-generics.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isCallServiceActionConfig: () => (/* binding */ isCallServiceActionConfig),\n/* harmony export */   isSortable: () => (/* binding */ isSortable),\n/* harmony export */   isSupportedDomain: () => (/* binding */ isSupportedDomain),\n/* harmony export */   isSupportedView: () => (/* binding */ isSupportedView)\n/* harmony export */ });\n/**\n * List of supported domains.\n *\n * This constant array defines the domains that are supported by the strategy.\n * Each domain represents a specific type of entity within the Home Assistant ecosystem.\n *\n * @remarks\n * - `_` refers to all domains.\n * - `default` refers to the miscellaneous domain.\n */\nconst SUPPORTED_DOMAINS = [\n    '_',\n    'binary_sensor',\n    'camera',\n    'climate',\n    'cover',\n    'default',\n    'fan',\n    'input_select',\n    'light',\n    'lock',\n    'media_player',\n    'number',\n    'scene',\n    'select',\n    'sensor',\n    'switch',\n    'vacuum',\n    'valve',\n];\n/**\n * List of supported views.\n *\n * This constant array defines the views that are supported by the strategy.\n */\nconst SUPPORTED_VIEWS = [\n    'camera',\n    'climate',\n    'cover',\n    'fan',\n    'home',\n    'light',\n    'lock',\n    'scene',\n    'switch',\n    'vacuum',\n    'valve',\n];\n/**\n * List of home view sections.\n *\n * This constant array defines the sections that are present in the home view.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst HOME_VIEW_SECTIONS = ['weather', 'lightsOn'];\n/**\n * Checks if the given object is of a sortable type.\n *\n * Sortable types are objects that have an `order`, `title` or `name` property.\n *\n * @param {object} object - The object to check.\n * @returns {boolean} - True if the object is an instance of Sortable, false otherwise.\n */\nfunction isSortable(object) {\n    return object && ('order' in object || 'title' in object || 'name' in object);\n}\n/**\n * Type guard to check if an object matches the CallServiceActionConfig interface.\n *\n * @param {ActionConfig} [object] - The object to check.\n * @returns {boolean} - True if the object represents a valid service action configuration.\n */\nfunction isCallServiceActionConfig(object) {\n    return (!!object && (object.action === 'perform-action' || object.action === 'call-service') && 'perform_action' in object);\n}\n/**\n * Type guard to check if a given identifier exists in a list of supported identifiers.\n *\n *\n * @param id The identifier to check\n * @param supportedList The list of valid identifiers\n * @returns True if the identifier exists in the supported list\n *\n * @typeParam T - The type of supported identifiers\n */\nfunction isInSupportedList(id, supportedList) {\n    return supportedList.includes(id);\n}\n/**\n * Type guard to check if the strategy supports a given view identifier.\n *\n * @param {string} id - The view identifier to check (e.g., \"light\", \"climate\", \"home\").\n * @returns {boolean} - True if the identifier represents a supported view type\n */\nfunction isSupportedView(id) {\n    return isInSupportedList(id, SUPPORTED_VIEWS);\n}\n/**\n * Type guard to check if the strategy supports a given domain identifier.\n *\n * @param {string} id - The domain identifier to check (e.g., \"light\", \"climate\", \"sensor\").\n * @returns {boolean} - True if the identifier represents a supported domain.\n *\n * @remarks\n * Special domains:\n * - \"_\" represents all domains\n * - \"default\" represents the miscellaneous domain\n */\nfunction isSupportedDomain(id) {\n    return isInSupportedList(id, SUPPORTED_DOMAINS);\n}\n\n\n//# sourceURL=webpack://jetson-strategy/./src/types/strategy/strategy-generics.ts?\n}");

/***/ }),

/***/ "./src/utilities/RegistryFilter.ts":
/*!*****************************************!*\
  !*** ./src/utilities/RegistryFilter.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Registry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Registry */ \"./src/Registry.ts\");\n/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug */ \"./src/utilities/debug.ts\");\n// noinspection JSUnusedGlobalSymbols\n\n\n/**\n * A class for filtering and sorting arrays of Home Assistant's registry entries.\n *\n * Supports chaining for building complex filter queries.\n *\n * @template T The specific type of RegistryEntry being filtered.\n * @template K - A property key of T.\n */\nclass RegistryFilter {\n    /**\n     * Creates a RegistryFilter.\n     *\n     * @param {T[]} entries Registry entries to filter.\n     */\n    constructor(entries) {\n        this.filters = [];\n        this.invertNext = false;\n        this.entries = entries;\n        this.entryIdentifier = (entries.length === 0 || 'entity_id' in entries[0] ? 'entity_id' : 'floor_id' in entries[0] ? 'area_id' : 'id');\n    }\n    /**\n     * Inverts the outcome of the next filter method in the chain.\n     *\n     * @remarks\n     * Double chaining like `.not().not().whereX()` cancels out the inversion for whereX().\n     */\n    not() {\n        this.invertNext = !this.invertNext;\n        return this;\n    }\n    /**\n     * Resets the internal filter chain, allowing the instance to be reused for new filtering operations on the same set\n     * of entries.\n     */\n    resetFilters() {\n        this.filters = [];\n        this.invertNext = false;\n        return this;\n    }\n    /**\n     * Adds a custom filter predicate to the filter chain.\n     *\n     * @param {(entry: T) => boolean} predicate A function that takes a registry entry and returns true if it should be\n     *                                          included.\n     */\n    where(predicate) {\n        this.filters.push(this.checkInversion(predicate));\n        return this;\n    }\n    /**\n     * Filters entries by their `area_id`.\n     *\n     * @param {string | undefined} areaId - The area id to match.\n     * @param {boolean} [expandToDevice=true] - Whether to evaluate the device's `area_id` (see remarks).\n     *\n     * @remarks\n     * The entry's `area_id` must match `areaId` (with special handling for 'undisclosed').\n     *\n     * If `expandToDevice` is true, additional rules apply based on `areaId`:\n     * - `areaId` is `null`/`undefined`: The device's `area_id` must be `null`.\n     * - `areaId` is `'undisclosed'`: The device's `area_id` must match or be `'undisclosed'`/`null`.\n     * - For other `areaId` values: If entry's `area_id` is `'undisclosed'`, the device's `area_id` must match `areaId`.\n     */\n    whereAreaId(areaId, expandToDevice = true) {\n        const predicate = (entry) => {\n            let deviceAreaId = undefined;\n            const entryObject = entry;\n            // Type guard for area_id\n            const hasAreaId = (obj) => 'area_id' in obj;\n            if (!hasAreaId(entry)) {\n                // If entry doesn't have area_id, skip this filter\n                return false;\n            }\n            if (expandToDevice && entryObject.device_id) {\n                deviceAreaId = _Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.devices.find((device) => device.id === entryObject.device_id)?.area_id;\n            }\n            if (!areaId) {\n                return entry.area_id === areaId && deviceAreaId === areaId;\n            }\n            if (areaId === 'undisclosed') {\n                return entry.area_id === areaId && (deviceAreaId === areaId || deviceAreaId == null);\n            }\n            if (entry.area_id === areaId) {\n                return true;\n            }\n            return entry.area_id === 'undisclosed' && deviceAreaId === areaId;\n        };\n        this.filters.push(this.checkInversion(predicate));\n        return this;\n    }\n    /**\n     * Filters entries by whether their name contains a specific subString.\n     *\n     * It checks different name properties based on the entry type (name, original_name, name_by_user).\n     *\n     * @param {string} subString The subString to search for in the entry's name.\n     */\n    whereNameContains(subString) {\n        const lowered = subString.toLowerCase();\n        const predicate = (entry) => {\n            const entryObj = entry;\n            return [entryObj.name, entryObj.original_name, entryObj.name_by_user]\n                .filter((field) => typeof field === 'string')\n                .some((field) => field.toLowerCase().includes(lowered));\n        };\n        this.filters.push(this.checkInversion(predicate));\n        return this;\n    }\n    /**\n     * Filters entities by their domain (e.g., \"light\", \"sensor\").\n     *\n     * @param {string} domain The domain to filter by.\n     *                        Entries whose entity_id starts with the domain are kept.\n     */\n    whereDomain(domain) {\n        const prefix = domain + '.';\n        const predicate = (entry) => 'entity_id' in entry && entry.entity_id.startsWith(prefix);\n        this.filters.push(this.checkInversion(predicate));\n        return this;\n    }\n    /**\n     * Filters entries by their floor id.\n     *\n     * - Entries with a **strictly** matching `floor_id` are kept.\n     * - If `floorId` is undefined (or omitted), entries without a `floor_id` property are kept.\n     *\n     * @param {string | null | undefined} [floorId] The floor id to strictly match.\n     */\n    whereFloorId(floorId) {\n        const predicate = (entry) => {\n            const hasFloorId = 'floor_id' in entry;\n            return floorId === undefined ? !hasFloorId : hasFloorId && entry.floor_id === floorId;\n        };\n        this.filters.push(this.checkInversion(predicate));\n        return this;\n    }\n    /**\n     * Filters entries by their device id.\n     *\n     * - Entries with a **strictly** matching `id` or `device_id` are kept.\n     * - If `deviceId` is undefined, only entries without both `id` and `device_id` are kept.\n     *\n     * @param {string | null | undefined} [deviceId] The device id to strictly match.\n     */\n    whereDeviceId(deviceId) {\n        const predicate = (entry) => {\n            const hasId = 'id' in entry;\n            const hasDeviceId = 'device_id' in entry;\n            if (deviceId === undefined) {\n                return !hasId && !hasDeviceId;\n            }\n            return (hasId && entry.id === deviceId) || (hasDeviceId && entry.device_id === deviceId);\n        };\n        this.filters.push(this.checkInversion(predicate));\n        return this;\n    }\n    /**\n     * Filters entities by their id.\n     *\n     * - Entities with a matching `entity_id` are kept.\n     * - If `entityId` is undefined, only entries without an `entity_id` property are kept.\n     *\n     * @param {string | null | undefined} [entityId] The entity id to match.\n     */\n    whereEntityId(entityId) {\n        const predicate = (entry) => entityId === undefined ? !('entity_id' in entry) : 'entity_id' in entry && entry.entity_id === entityId;\n        this.filters.push(this.checkInversion(predicate));\n        return this;\n    }\n    /**\n     * Filters entries **strictly** by their `disabled_by` status.\n     *\n     * @param {EntityRegistryEntry['disabled_by'] | DeviceRegistryEntry['disabled_by'] | undefined} [disabledBy]\n     *   The reason the entry was disabled (e.g., \"user\", \"integration\", etc.).\n     *   Entries with a matching `disabled_by` value are kept.\n     *   If `disabledBy` is undefined, only entries without a `disabled_by` property are kept.\n     */\n    whereDisabledBy(disabledBy) {\n        const predicate = (entry) => {\n            const hasDisabledBy = 'disabled_by' in entry;\n            return disabledBy === undefined ? !hasDisabledBy : hasDisabledBy && entry.disabled_by === disabledBy;\n        };\n        this.filters.push(this.checkInversion(predicate));\n        return this;\n    }\n    /**\n     * Filters entities by their `hidden_by` status.\n     *\n     * @param {EntityRegistryEntry['hidden_by'] | undefined} [hiddenBy]\n     *   The reason the entity was hidden (e.g., \"user\", \"integration\", etc.).\n     *   Entries with a matching `hidden_by` value are included.\n     *   If undefined, only entries without a `hidden_by` property are included.\n     */\n    whereHiddenBy(hiddenBy) {\n        const predicate = (entry) => {\n            const hasHiddenBy = 'hidden_by' in entry;\n            return hiddenBy === undefined ? !hasHiddenBy : hasHiddenBy && entry.hidden_by === hiddenBy;\n        };\n        this.filters.push(this.checkInversion(predicate));\n        return this;\n    }\n    /**\n     * Filters out entries that are hidden.\n     *\n     * Optionally, it can also filter out entries that are marked as hidden in the strategy options.\n     *\n     * @param {boolean} [applyStrategyOptions = true] If true, entries marked as hidden in the strategy options are also\n     *                                                filtered out.\n     */\n    isNotHidden(applyStrategyOptions = true) {\n        const predicate = (entry) => {\n            const isHiddenByProperty = 'hidden_by' in entry && entry.hidden_by;\n            if (!applyStrategyOptions) {\n                return !isHiddenByProperty;\n            }\n            const id = entry[this.entryIdentifier];\n            const options = this.entryIdentifier === 'area_id'\n                ? { ..._Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.strategyOptions.areas['_'], ..._Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.strategyOptions.areas[id] }\n                : _Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.strategyOptions.card_options?.[id];\n            const isHiddenByConfig = options?.hidden === true;\n            return !isHiddenByProperty && !isHiddenByConfig;\n        };\n        this.filters.push(this.checkInversion(predicate));\n        return this;\n    }\n    /**\n     * Filters entries **strictly** by their `entity_category`.\n     *\n     * - Without `.not()`: returns only entries where `entity_category` exactly matches the given argument (e.g.,\n     *   'config', 'diagnostic', null, or undefined).\n     * - With `.not()`: returns all entries where `entity_category` does NOT match the given argument.\n     *\n     * @param {EntityCategory | null} entityCategory The desired entity_category (e.g., 'config', 'diagnostic', null, or\n     *   undefined)\n     *\n     * @remarks\n     * Visibility via the strategy options:\n     * - If `hide_{category}_entities: true` is set, entries of that category are NEVER kept, regardless of the filter.\n     * - If `hide_{category}_entities: false` is set, entries of that category are ALWAYS kept when filtering for that\n     *   category, even when preceded by `.not()`.\n     * - If neither is set:\n     *   - If preceded by not(), entries of that category are implicitly filtered out.\n     *   - Otherwise they are implicitly kept.\n     *\n     * @example\n     *  .whereEntityCategory('config')           // Only 'config' entries (unless explicitly hidden)\n     *  .not().whereEntityCategory('diagnostic') // All except 'diagnostic' entries\n     *  .whereEntityCategory(null)               // Only entries with 'entity_category: null'\n     *  .whereEntityCategory()                   // Only entries without an 'entity_category' field\n     */\n    whereEntityCategory(entityCategory) {\n        const invert = this.invertNext;\n        this.invertNext = false;\n        const predicate = (entry) => {\n            const category = 'entity_category' in entry ? entry.entity_category : undefined;\n            const hideOption = typeof category === 'string'\n                ? _Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.strategyOptions?.domains?.['_']?.[`hide_${category}_entities`]\n                : undefined;\n            if (hideOption === true) {\n                return false;\n            }\n            if (hideOption === false && category === entityCategory) {\n                return true;\n            }\n            return invert ? category !== entityCategory : category === entityCategory;\n        };\n        this.filters.push(predicate);\n        return this;\n    }\n    /**\n     * Sorts the entries based on the specified keys in priority order.\n     *\n     * @template K - The type of keys to sort by (must be keys of T).\n     * @param {K[]} keys - Array of property keys to sort by, in order of priority.\n     * @param {'asc' | 'desc'} [direction='asc'] - Sort direction.\n     * @returns {RegistryFilter<T>} A new RegistryFilter instance with sorted entries.\n     */\n    orderBy(keys, direction = 'asc') {\n        // Helper to get the first defined value from an entry for the given keys.\n        const getValue = (entry, keys) => {\n            for (const key of keys) {\n                const value = entry[key];\n                if (value !== null && value !== undefined) {\n                    return value;\n                }\n            }\n            return undefined;\n        };\n        // Assign sort priorities for special values.\n        const getSortValue = (value) => {\n            switch (value) {\n                case -Infinity:\n                    return [0, 0]; // First.\n                case undefined:\n                case null:\n                    return [2, 0]; // In between.\n                case Infinity:\n                    return [3, 0]; // Last.\n                default:\n                    return [1, value]; // Normal value comparison.\n            }\n        };\n        // Create a new array to avoid mutating the original.\n        const sortedEntries = [...this.entries].sort((a, b) => {\n            // Get the first defined value for each entry using the provided keys\n            const valueA = getValue(a, keys);\n            const valueB = getValue(b, keys);\n            // If values are strictly equal, they're in the same position.\n            if (valueA === valueB) {\n                return 0;\n            }\n            // Get sort priorities and comparable values\n            const [priorityA, comparableA] = getSortValue(valueA);\n            const [priorityB, comparableB] = getSortValue(valueB);\n            // First, compare by priority (handles special values).\n            if (priorityA !== priorityB) {\n                return (priorityA - priorityB) * (direction === 'asc' ? 1 : -1);\n            }\n            // For same priority, compare the actual values.\n            // Handle undefined/null cases\n            if (comparableA === undefined || comparableA === null) {\n                return 1;\n            }\n            if (comparableB === undefined || comparableB === null) {\n                return -1;\n            }\n            // String comparison.\n            if (typeof comparableA === 'string' && typeof comparableB === 'string') {\n                return comparableA.localeCompare(comparableB) * (direction === 'asc' ? 1 : -1);\n            }\n            // Numeric/other comparison.\n            return (comparableA < comparableB ? -1 : 1) * (direction === 'asc' ? 1 : -1);\n        });\n        // Create a new filter with the sorted entries.\n        const newFilter = new RegistryFilter(sortedEntries);\n        // Copy over existing filters.\n        newFilter.filters = [...this.filters];\n        return newFilter;\n    }\n    /**\n     * Takes a specified number of entries from the beginning of the filtered results.\n     *\n     * @param {number} count The number of entries to take. If negative, defaults to 0.\n     */\n    take(count) {\n        const safeCount = Math.max(0, count);\n        this.filters.push((_, index) => index < safeCount);\n        return this;\n    }\n    /**\n     * Skips a specified number of entries from the beginning of the filtered results.\n     *\n     * @param {number} count The number of entries to skip. If negative, defaults to 0.\n     */\n    skip(count) {\n        const safeCount = Math.max(0, count);\n        this.filters.push((_, index) => index >= safeCount);\n        return this;\n    }\n    /**\n     * Applies all the accumulated filters to the entries and returns the resulting array.\n     *\n     * @remarks\n     * - This method creates a forked (shallow-copied) RegistryFilter instance to ensure immutability.\n     * - The original `entries` and `filters` arrays are not mutated or affected by this operation.\n     * - This allows chainable and reusable filter logic, so you can call additional filtering methods on the original\n     *   instance after calling this method.\n     */\n    toList() {\n        const fork = new RegistryFilter(this.entries);\n        fork.filters = [...this.filters];\n        return fork.entries.filter((entry, index) => fork.filters.every((filter) => filter(entry, index)));\n    }\n    /**\n     * Retrieves an array of values for a specified property from the filtered entries.\n     *\n     * @param {keyof T} propertyName - The name of the property whose values are to be retrieved.\n     * @returns {Array<T[keyof T]>} An array of values corresponding to the specified property.\n     *                               If the property does not exist in any entry, those entries will be filtered out.\n     */\n    getValuesByProperty(propertyName) {\n        const entries = this.toList(); // Call toList to get the full entries\n        return entries.map((entry) => entry[propertyName]).filter((value) => value !== undefined);\n    }\n    /**\n     * Applies all the accumulated filters to the entries and returns the first remaining entry.\n     *\n     * @remarks\n     * - This method creates a forked (shallow-copied) RegistryFilter instance to ensure immutability.\n     * - The original `entries` and `filters` arrays are not mutated or affected by this operation.\n     * - This allows chainable and reusable filter logic, so you can call additional filtering methods on the original\n     *   instance after calling this method.\n     */\n    first() {\n        const fork = new RegistryFilter(this.entries);\n        fork.filters = [...this.filters];\n        return fork.entries.find((entry, index) => fork.filters.every((filter) => filter(entry, index)));\n    }\n    /**\n     * Applies the filters on a forked instance and returns the single matching entry.\n     *\n     * @remarks\n     * - This method creates a forked (shallow-copied) RegistryFilter instance to ensure immutability.\n     * - The original `entries` and `filters` arrays are not mutated or affected by this operation.\n     */\n    single() {\n        const fork = new RegistryFilter(this.entries);\n        fork.filters = [...this.filters];\n        const result = fork.entries.filter((entry, index) => fork.filters.every((filter) => filter(entry, index)));\n        if (result.length === 1) {\n            return result[0];\n        }\n        (0,_debug__WEBPACK_IMPORTED_MODULE_1__.logMessage)(_debug__WEBPACK_IMPORTED_MODULE_1__.lvlWarn, `Expected a single element, but found ${result.length}.`);\n        return undefined;\n    }\n    /**\n     * Applies the filters on a forked instance and returns the number of matching entries.\n     * The original RegistryFilter instance remains unchanged and can be reused for further filtering.\n     *\n     * @remarks\n     * - This method creates a forked (shallow-copied) RegistryFilter instance to ensure immutability.\n     * - The original `entries` and `filters` arrays are not mutated or affected by this operation.\n     */\n    count() {\n        const fork = new RegistryFilter(this.entries);\n        fork.filters = [...this.filters];\n        return fork.entries.filter((entry, index) => fork.filters.every((filter) => filter(entry, index))).length;\n    }\n    /**\n     * Checks the inversion flag set by {@link not} to a filter predicate and applies the inversion if necessary.\n     *\n     * @param {((entry: T) => boolean)} predicate The filter predicate to apply the inversion to.\n     *\n     * @returns {((entry: T) => boolean)} The predicate with the inversion applied, or the original predicate if no\n     *                                    inversion is to be applied.\n     *\n     * @private\n     */\n    checkInversion(predicate) {\n        if (this.invertNext) {\n            this.invertNext = false;\n            return (entry) => !predicate(entry);\n        }\n        return predicate;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (RegistryFilter);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/utilities/RegistryFilter.ts?\n}");

/***/ }),

/***/ "./src/utilities/auxiliaries.ts":
/*!**************************************!*\
  !*** ./src/utilities/auxiliaries.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deepClone: () => (/* binding */ deepClone),\n/* harmony export */   sanitizeClassName: () => (/* binding */ sanitizeClassName)\n/* harmony export */ });\n/**\n * Sanitize a classname.\n *\n * The name is sanitized by capitalizing the first character of the name or after an underscore.\n * The underscores are removed.\n *\n * @param {string} className Name of the class to sanitize.\n */\nfunction sanitizeClassName(className) {\n    return className.replace(/^([a-z])|([-_][a-z])/g, (match) => match.toUpperCase().replace(/[-_]/g, ''));\n}\n/**\n * Creates a deep clone of the provided value.\n *\n * - It uses the native `structuredClone` if available (supports most built-in types, circular references, etc.).\n * - Falls back to `JSON.parse(JSON.stringify(obj))` for plain objects and arrays if `structuredClone` is unavailable\n *   or fails.\n *\n * @template T\n * @param {T} obj - The value to deep clone.\n * @returns {T} A deep clone of the input value, or the original value if cloning fails.\n */\nfunction deepClone(obj) {\n    if (typeof structuredClone === 'function') {\n        try {\n            return structuredClone(obj);\n        }\n        catch {\n            // Ignore error: fallback to the next method\n        }\n    }\n    try {\n        return JSON.parse(JSON.stringify(obj));\n    }\n    catch {\n        return obj;\n    }\n}\n\n\n//# sourceURL=webpack://jetson-strategy/./src/utilities/auxiliaries.ts?\n}");

/***/ }),

/***/ "./src/utilities/cardStacking.ts":
/*!***************************************!*\
  !*** ./src/utilities/cardStacking.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   stackHorizontal: () => (/* binding */ stackHorizontal)\n/* harmony export */ });\n// noinspection GrazieInspection\n/**\n * Stacks an array of Lovelace card configurations into horizontal stacks based on their type.\n *\n * This method processes sequences of cards with the same type and applies a specified column count\n * for each type of card.\n * It returns a new array of stacked card configurations, preserving the original order of the cards.\n *\n * @param cardConfigurations - An array of Lovelace card configurations to be stacked.\n * @param defaultCount - The default number of cards to stack if the type or column count is not found in the mapping.\n * @param [columnCounts] - An object mapping card types to their respective column counts.\n *                         If a type is not found in the mapping, it defaults to 2.\n * @returns An array of stacked card configurations, where each configuration is a horizontal stack\n *          containing a specified number of cards.\n *\n * @example\n * ```typescript\n * stackedCards = stackHorizontal(card, 2, {area: 1, 'custom:card': 2});\n * ```\n */\nfunction stackHorizontal(cardConfigurations, defaultCount = 2, columnCounts) {\n    if (cardConfigurations.length <= 1) {\n        return cardConfigurations;\n    }\n    // Function to process a sequence of cards\n    const doStack = (cards, columnCount) => {\n        if (cards.length <= 1) {\n            return cards;\n        }\n        const stackedCardConfigurations = [];\n        for (let i = 0; i < cards.length; i += columnCount) {\n            stackedCardConfigurations.push({\n                type: 'horizontal-stack',\n                cards: cards.slice(i, i + columnCount),\n            });\n        }\n        return stackedCardConfigurations;\n    };\n    // Array to hold the processed cards\n    const processedConfigurations = [];\n    for (let i = 0; i < cardConfigurations.length;) {\n        const currentCard = cardConfigurations[i];\n        const currentType = currentCard.type;\n        // Start a new sequence\n        const sequence = [];\n        // Collect all cards of the same type into the sequence\n        while (i < cardConfigurations.length && cardConfigurations[i].type === currentType) {\n            sequence.push(cardConfigurations[i]);\n            i++; // Move to the next card\n        }\n        const columnCount = Math.max(columnCounts?.[currentType] || defaultCount, 1);\n        // Process the sequence and add the result to the processedConfigurations array\n        processedConfigurations.push(...doStack(sequence, columnCount));\n    }\n    return processedConfigurations;\n}\n\n\n//# sourceURL=webpack://jetson-strategy/./src/utilities/cardStacking.ts?\n}");

/***/ }),

/***/ "./src/utilities/debug.ts":
/*!********************************!*\
  !*** ./src/utilities/debug.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DebugLevel: () => (/* binding */ DebugLevel),\n/* harmony export */   logMessage: () => (/* binding */ logMessage),\n/* harmony export */   lvlDebug: () => (/* binding */ lvlDebug),\n/* harmony export */   lvlError: () => (/* binding */ lvlError),\n/* harmony export */   lvlFatal: () => (/* binding */ lvlFatal),\n/* harmony export */   lvlInfo: () => (/* binding */ lvlInfo),\n/* harmony export */   lvlOff: () => (/* binding */ lvlOff),\n/* harmony export */   lvlWarn: () => (/* binding */ lvlWarn),\n/* harmony export */   setDebugLevel: () => (/* binding */ setDebugLevel)\n/* harmony export */ });\n/* harmony import */ var _auxiliaries__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./auxiliaries */ \"./src/utilities/auxiliaries.ts\");\n\n/**\n * Log levels for the debug logger.\n *\n * - Off:   Logging is disabled.\n * - Debug: Diagnostic information that can be helpful for troubleshooting and debugging.\n * - Info:  General information about the status of the system\n * - Warn:  Signal for potential issues that are not necessarily a critical error.\n * - Error: Significant problems that happened in the system.\n * - Fatal: severe conditions that cause the system to terminate or operate in a significantly degraded state.\n */\nvar DebugLevel;\n(function (DebugLevel) {\n    DebugLevel[DebugLevel[\"Off\"] = 0] = \"Off\";\n    DebugLevel[DebugLevel[\"Debug\"] = 1] = \"Debug\";\n    DebugLevel[DebugLevel[\"Info\"] = 2] = \"Info\";\n    DebugLevel[DebugLevel[\"Warn\"] = 3] = \"Warn\";\n    DebugLevel[DebugLevel[\"Error\"] = 4] = \"Error\";\n    DebugLevel[DebugLevel[\"Fatal\"] = 5] = \"Fatal\";\n})(DebugLevel || (DebugLevel = {}));\n// noinspection JSUnusedGlobalSymbols\n/**\n * Individually exported log level constants.\n *\n * @see DebugLevel\n */\nconst { Off: lvlOff, Debug: lvlDebug, Info: lvlInfo, Warn: lvlWarn, Error: lvlError, Fatal: lvlFatal, } = DebugLevel;\n/**\n * The current global log level.\n *\n * Only messages with a level less than or equal to this will be logged.\n *\n * @default DebugLevel.Off\n */\nlet currentLevel = DebugLevel.Fatal;\n/**\n * Extracts the name of the function or method that called the logger from a stack trace string.\n *\n * Handles both Chrome and Firefox stack trace formats:\n * - Chrome: \"at ClassName.methodName (url:line:column)\"\n * - Firefox: \"methodName@url:line:column\"\n *\n * Returns the full caller (including class, if available), or \"unknown\" if not found.\n *\n * @param stack - The stack trace string, typically from new Error().stack\n * @returns The caller's function/method name (with class if available), or \"unknown\"\n */\nfunction getCallerName(stack) {\n    if (!stack) {\n        return 'unknown';\n    }\n    const lines = stack.split('\\n').filter(Boolean);\n    // Find the first line that contains '@' and is not logMessage itself\n    for (let i = 1; i < lines.length; i++) {\n        const line = lines[i].trim();\n        if (line.includes('@') && !line.startsWith('logMessage')) {\n            return line.split('@')[0] || 'anonymous';\n        }\n        // Fallback for anonymous functions\n        if (line.startsWith('@')) {\n            return 'anonymous function';\n        }\n    }\n    // Chrome fallback\n    for (let i = 1; i < lines.length; i++) {\n        const match = lines[i].match(/at ([^( ]+)/);\n        if (match && match[1] && match[1] !== 'logMessage') {\n            return match[1];\n        }\n    }\n    return 'unknown function';\n}\n/**\n * Sets the global log level.\n *\n * @param {DebugLevel} level - The maximum level to log.\n * @see DebugLevel\n */\nfunction setDebugLevel(level) {\n    currentLevel = level;\n}\n/**\n * Logs a message in the console at the specified level if allowed by the current global log level.\n *\n * Only messages with a level less than or equal to the currentLevel are logged.\n *\n * @param {DebugLevel} level - The severity of the message.\n * @param {string} message - The message to log.\n * @param {unknown[]} [details] - Optional extra details (e.g., error object).\n *\n * @throws {Error} After logging, if the level is `lvlError` or `lvlFatal`.\n *\n * @remarks\n * It might be required to throw an additional Error after logging with `lvlError ` or `lvlFatal` to satify the\n * TypeScript compiler.\n */\nfunction logMessage(level, message, ...details) {\n    if (currentLevel === DebugLevel.Off || level > currentLevel) {\n        return;\n    }\n    const frontEndMessage = 'Strategy - An error occurred. Check the console (F12) for details.';\n    const prefix = `[${DebugLevel[level].toUpperCase()}]`;\n    const safeDetails = details.map(_auxiliaries__WEBPACK_IMPORTED_MODULE_0__.deepClone);\n    const caller = `[at ${getCallerName(new Error().stack)}]`;\n    switch (level) {\n        case DebugLevel.Debug:\n            console.debug(`${prefix}${caller} ${message}`, ...safeDetails);\n            break;\n        case DebugLevel.Info:\n            console.info(`${prefix}${caller} ${message}`, ...safeDetails);\n            break;\n        case DebugLevel.Warn:\n            console.warn(`${prefix}${caller} ${message}`, ...safeDetails);\n            break;\n        case DebugLevel.Error:\n            console.error(`${prefix}${caller} ${message}`, ...safeDetails);\n            throw frontEndMessage;\n        case DebugLevel.Fatal:\n            console.error(`${prefix}${caller} ${message}`, ...safeDetails);\n            alert?.(`${prefix} ${message}`);\n            throw frontEndMessage;\n    }\n}\n\n\n//# sourceURL=webpack://jetson-strategy/./src/utilities/debug.ts?\n}");

/***/ }),

/***/ "./src/utilities/localize.ts":
/*!***********************************!*\
  !*** ./src/utilities/localize.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{var _translations_en_json__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\nvar _translations_es_json__WEBPACK_IMPORTED_MODULE_1___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ setupCustomLocalize),\n/* harmony export */   localize: () => (/* binding */ localize)\n/* harmony export */ });\n/* harmony import */ var _translations_en_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../translations/en.json */ \"./src/translations/en.json\");\n/* harmony import */ var _translations_es_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../translations/es.json */ \"./src/translations/es.json\");\n/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./debug */ \"./src/utilities/debug.ts\");\n\n\n\n/** Registry of currently supported languages */\nconst languages = {\n    en: /*#__PURE__*/ (_translations_en_json__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (_translations_en_json__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(_translations_en_json__WEBPACK_IMPORTED_MODULE_0__, 2))),\n    es: /*#__PURE__*/ (_translations_es_json__WEBPACK_IMPORTED_MODULE_1___namespace_cache || (_translations_es_json__WEBPACK_IMPORTED_MODULE_1___namespace_cache = __webpack_require__.t(_translations_es_json__WEBPACK_IMPORTED_MODULE_1__, 2))),\n};\n/** The fallback language if the user-defined language isn't defined */\nconst DEFAULT_LANG = 'en';\n/**\n * Get a string by keyword and language.\n *\n * @param {string} key The key to look for in the object notation of the language file (E.g., `generic.home`).\n * @param {string} lang The language to get the string from (E.g., `en`).\n *\n * @returns {string | undefined} The requested string or undefined if the keyword doesn't exist/on error.\n */\nfunction getTranslatedString(key, lang) {\n    try {\n        return key.split('.').reduce((o, i) => o[i], languages[lang]);\n    }\n    catch {\n        return undefined;\n    }\n}\n/**\n * Singleton instance of the localization function.\n *\n * This variable is set by {@link setupCustomLocalize} and used by {@link localize}.\n *\n * - Must be initialized before {@link localize} is called.\n * - Holds a closure that translates keys based on the language set during setup.\n *\n * @private\n */\nlet _localize = undefined;\n/**\n * Set up the localization.\n *\n * It reads the user-defined language with a fall-back to English and returns a function to get strings from\n * language-files by keyword.\n *\n * If the keyword is undefined, or on an error, the keyword itself is returned.\n *\n * @param {HomeAssistant} hass The Home Assistant object.\n */\nfunction setupCustomLocalize(hass) {\n    const lang = hass?.locale.language ?? DEFAULT_LANG;\n    _localize = (key) => getTranslatedString(key, lang) ?? getTranslatedString(key, DEFAULT_LANG) ?? key;\n}\n/**\n * Translate a key using the globally configured localize function.\n */\nfunction localize(key) {\n    if (!_localize) {\n        (0,_debug__WEBPACK_IMPORTED_MODULE_2__.logMessage)(_debug__WEBPACK_IMPORTED_MODULE_2__.lvlWarn, 'localize is not initialized! Call setupCustomLocalize first.');\n        return key;\n    }\n    return _localize(key);\n}\n\n\n//# sourceURL=webpack://jetson-strategy/./src/utilities/localize.ts?\n}");

/***/ }),

/***/ "./src/views lazy recursive ^\\.\\/.*$":
/*!***************************************************!*\
  !*** ./src/views/ lazy ^\.\/.*$ namespace object ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{var map = {\n\t\"./AbstractView\": [\n\t\t\"./src/views/AbstractView.ts\",\n\t\t\"main\"\n\t],\n\t\"./AbstractView.ts\": [\n\t\t\"./src/views/AbstractView.ts\",\n\t\t\"main\"\n\t],\n\t\"./CameraView\": [\n\t\t\"./src/views/CameraView.ts\",\n\t\t\"main\"\n\t],\n\t\"./CameraView.ts\": [\n\t\t\"./src/views/CameraView.ts\",\n\t\t\"main\"\n\t],\n\t\"./ClimateView\": [\n\t\t\"./src/views/ClimateView.ts\",\n\t\t\"main\"\n\t],\n\t\"./ClimateView.ts\": [\n\t\t\"./src/views/ClimateView.ts\",\n\t\t\"main\"\n\t],\n\t\"./CoverView\": [\n\t\t\"./src/views/CoverView.ts\",\n\t\t\"main\"\n\t],\n\t\"./CoverView.ts\": [\n\t\t\"./src/views/CoverView.ts\",\n\t\t\"main\"\n\t],\n\t\"./FanView\": [\n\t\t\"./src/views/FanView.ts\",\n\t\t\"main\"\n\t],\n\t\"./FanView.ts\": [\n\t\t\"./src/views/FanView.ts\",\n\t\t\"main\"\n\t],\n\t\"./HomeView\": [\n\t\t\"./src/views/HomeView.ts\",\n\t\t\"main\"\n\t],\n\t\"./HomeView.ts\": [\n\t\t\"./src/views/HomeView.ts\",\n\t\t\"main\"\n\t],\n\t\"./LightView\": [\n\t\t\"./src/views/LightView.ts\",\n\t\t\"main\"\n\t],\n\t\"./LightView.ts\": [\n\t\t\"./src/views/LightView.ts\",\n\t\t\"main\"\n\t],\n\t\"./LockView\": [\n\t\t\"./src/views/LockView.ts\",\n\t\t\"main\"\n\t],\n\t\"./LockView.ts\": [\n\t\t\"./src/views/LockView.ts\",\n\t\t\"main\"\n\t],\n\t\"./SceneView\": [\n\t\t\"./src/views/SceneView.ts\",\n\t\t\"main\"\n\t],\n\t\"./SceneView.ts\": [\n\t\t\"./src/views/SceneView.ts\",\n\t\t\"main\"\n\t],\n\t\"./SwitchView\": [\n\t\t\"./src/views/SwitchView.ts\",\n\t\t\"main\"\n\t],\n\t\"./SwitchView.ts\": [\n\t\t\"./src/views/SwitchView.ts\",\n\t\t\"main\"\n\t],\n\t\"./VacuumView\": [\n\t\t\"./src/views/VacuumView.ts\",\n\t\t\"main\"\n\t],\n\t\"./VacuumView.ts\": [\n\t\t\"./src/views/VacuumView.ts\",\n\t\t\"main\"\n\t],\n\t\"./ValveView\": [\n\t\t\"./src/views/ValveView.ts\",\n\t\t\"main\"\n\t],\n\t\"./ValveView.ts\": [\n\t\t\"./src/views/ValveView.ts\",\n\t\t\"main\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = \"./src/views lazy recursive ^\\\\.\\\\/.*$\";\nmodule.exports = webpackAsyncContext;\n\n//# sourceURL=webpack://jetson-strategy/./src/views/_lazy_^\\.\\/.*$_namespace_object?\n}");

/***/ }),

/***/ "./src/views/AbstractView.ts":
/*!***********************************!*\
  !*** ./src/views/AbstractView.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _cards_HeaderCard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../cards/HeaderCard */ \"./src/cards/HeaderCard.ts\");\n/* harmony import */ var _Registry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Registry */ \"./src/Registry.ts\");\n/* harmony import */ var _utilities_auxiliaries__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities/auxiliaries */ \"./src/utilities/auxiliaries.ts\");\n/* harmony import */ var _utilities_debug__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/debug */ \"./src/utilities/debug.ts\");\n/* harmony import */ var _utilities_RegistryFilter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities/RegistryFilter */ \"./src/utilities/RegistryFilter.ts\");\n/* harmony import */ var _utilities_cardStacking__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities/cardStacking */ \"./src/utilities/cardStacking.ts\");\n\n\n\n\n\n\n/**\n * Abstract View Class.\n *\n * To create a view configuration, this class should be extended by a child class.\n * Child classes should override the default configuration so the view correctly reflects the entities of a domain.\n *\n * @remarks\n * Before this class can be used, the Registry module must be initialized by calling {@link Registry.initialize}.\n */\nclass AbstractView {\n    get domain() {\n        return this.constructor.domain;\n    }\n    /**\n     * Class constructor.\n     *\n     * @remarks\n     * Before this class can be used, the Registry module must be initialized by calling {@link Registry.initialize}.\n     */\n    constructor() {\n        /** The base configuration of a view. */\n        this.baseConfiguration = {\n            icon: 'mdi:view-dashboard',\n            subview: false,\n        };\n        /** A card configuration to control all entities in the view. */\n        this.viewHeaderCardConfiguration = {\n            cards: [],\n            type: '',\n        };\n        if (!_Registry__WEBPACK_IMPORTED_MODULE_1__.Registry.initialized) {\n            (0,_utilities_debug__WEBPACK_IMPORTED_MODULE_3__.logMessage)(_utilities_debug__WEBPACK_IMPORTED_MODULE_3__.lvlFatal, 'Registry is not initialized!');\n        }\n    }\n    /**\n     * Create the configuration of the cards to include in the view.\n     */\n    async createCardConfigurations() {\n        const viewCards = [];\n        const moduleName = (0,_utilities_auxiliaries__WEBPACK_IMPORTED_MODULE_2__.sanitizeClassName)(this.domain + 'Card');\n        const DomainCard = (await __webpack_require__(\"./src/cards lazy recursive ^\\\\.\\\\/.*$\")(`./${moduleName}`)).default;\n        const domainEntities = new _utilities_RegistryFilter__WEBPACK_IMPORTED_MODULE_4__[\"default\"](_Registry__WEBPACK_IMPORTED_MODULE_1__.Registry.entities)\n            .whereDomain(this.domain)\n            .where((entity) => !entity.entity_id.endsWith('_stateful_scene'))\n            .toList();\n        // Create card configurations for each area.\n        for (const area of _Registry__WEBPACK_IMPORTED_MODULE_1__.Registry.areas) {\n            let areaCards = [];\n            // Set the target of the Header card to the current area.\n            let target = {\n                area_id: [area.area_id],\n            };\n            const areaEntities = new _utilities_RegistryFilter__WEBPACK_IMPORTED_MODULE_4__[\"default\"](domainEntities).whereAreaId(area.area_id).toList();\n            // Set the target of the Header card to entities without an area.\n            if (area.area_id === 'undisclosed') {\n                target = {\n                    entity_id: areaEntities.map((entity) => entity.entity_id),\n                };\n            }\n            // Create a card configuration for each entity in the current area.\n            areaCards.push(...areaEntities.map((entity) => new DomainCard(entity, _Registry__WEBPACK_IMPORTED_MODULE_1__.Registry.strategyOptions.card_options?.[entity.entity_id]).getCard()));\n            // Stack the cards of the current area.\n            if (areaCards.length) {\n                areaCards = (0,_utilities_cardStacking__WEBPACK_IMPORTED_MODULE_5__.stackHorizontal)(areaCards, _Registry__WEBPACK_IMPORTED_MODULE_1__.Registry.strategyOptions.domains[this.domain].stack_count ??\n                    _Registry__WEBPACK_IMPORTED_MODULE_1__.Registry.strategyOptions.domains['_'].stack_count);\n                // Create and insert a Header card.\n                const areaHeaderCardOptions = ('headerCardConfiguration' in this.baseConfiguration ? this.baseConfiguration.headerCardConfiguration : {});\n                areaCards.unshift(new _cards_HeaderCard__WEBPACK_IMPORTED_MODULE_0__[\"default\"](target, { title: area.name, ...areaHeaderCardOptions }).createCard());\n                viewCards.push({ type: 'vertical-stack', cards: areaCards });\n            }\n        }\n        // Add a Header Card to control all the entities in the view.\n        if (this.viewHeaderCardConfiguration.cards.length && viewCards.length) {\n            viewCards.unshift(this.viewHeaderCardConfiguration);\n        }\n        return viewCards;\n    }\n    /**\n     * Get a view configuration.\n     *\n     * The configuration includes the card configurations which are created by createCardConfigurations().\n     */\n    async getView() {\n        return {\n            ...this.baseConfiguration,\n            cards: await this.createCardConfigurations(),\n        };\n    }\n    /**\n     * Get the domain's entity ids to target for a HASS service call.\n     */\n    getDomainTargets() {\n        return {\n            entity_id: _Registry__WEBPACK_IMPORTED_MODULE_1__.Registry.entities\n                .filter((entity) => entity.entity_id.startsWith(this.domain + '.'))\n                .map((entity) => entity.entity_id),\n        };\n    }\n    /**\n     * Initialize the view configuration with defaults and custom settings.\n     *\n     * @param viewConfiguration The view's default configuration for the view.\n     * @param customConfiguration The view's custom configuration to apply.\n     * @param headerCardConfig The view's Header card configuration.\n     */\n    initializeViewConfig(viewConfiguration, customConfiguration = {}, headerCardConfig) {\n        this.baseConfiguration = { ...this.baseConfiguration, ...viewConfiguration, ...customConfiguration };\n        this.baseConfiguration.headerCardConfiguration = {\n            ...this.baseConfiguration.headerCardConfiguration,\n            showControls: _Registry__WEBPACK_IMPORTED_MODULE_1__.Registry.strategyOptions.domains[this.domain]?.showControls ??\n                _Registry__WEBPACK_IMPORTED_MODULE_1__.Registry.strategyOptions.domains['_'].showControls,\n        };\n        this.viewHeaderCardConfiguration = new _cards_HeaderCard__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.getDomainTargets(), {\n            ...this.baseConfiguration.headerCardConfiguration,\n            ...headerCardConfig,\n        }).createCard();\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AbstractView);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/views/AbstractView.ts?\n}");

/***/ }),

/***/ "./src/views/CameraView.ts":
/*!*********************************!*\
  !*** ./src/views/CameraView.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Registry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Registry */ \"./src/Registry.ts\");\n/* harmony import */ var _utilities_localize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/localize */ \"./src/utilities/localize.ts\");\n/* harmony import */ var _AbstractView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AbstractView */ \"./src/views/AbstractView.ts\");\n// noinspection JSUnusedGlobalSymbols Class is dynamically imported.\n\n\n\n/**\n * Camera View Class.\n *\n * Used to create a view configuration for entities of the camera domain.\n */\nclass CameraView extends _AbstractView__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    /** Returns the default configuration object for the view. */\n    static getDefaultConfig() {\n        return {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('camera.cameras'),\n            path: 'cameras',\n            icon: 'mdi:cctv',\n            subview: false,\n            headerCardConfiguration: {\n                showControls: false, // FIXME: This should be named \"show_controls\". Also in other files and Wiki.\n            },\n        };\n    }\n    /** Returns the default configuration of the view's Header card. */\n    static getViewHeaderCardConfig() {\n        return {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('camera.all_cameras'),\n            subtitle: `${_Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.getCountTemplate(CameraView.domain, 'ne', 'off')} ${(0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('camera.cameras')} ` +\n                (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('generic.busy'),\n        };\n    }\n    /**\n     * Class constructor.\n     *\n     * @param {ViewConfig} [customConfiguration] Custom view configuration.\n     */\n    constructor(customConfiguration) {\n        super();\n        this.initializeViewConfig(CameraView.getDefaultConfig(), customConfiguration, CameraView.getViewHeaderCardConfig());\n    }\n}\n/** The domain of the entities that the view is representing. */\nCameraView.domain = 'camera';\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CameraView);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/views/CameraView.ts?\n}");

/***/ }),

/***/ "./src/views/ClimateView.ts":
/*!**********************************!*\
  !*** ./src/views/ClimateView.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Registry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Registry */ \"./src/Registry.ts\");\n/* harmony import */ var _utilities_localize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/localize */ \"./src/utilities/localize.ts\");\n/* harmony import */ var _AbstractView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AbstractView */ \"./src/views/AbstractView.ts\");\n// noinspection JSUnusedGlobalSymbols Class is dynamically imported.\n\n\n\n/**\n * Climate View Class.\n *\n * Used to create a view configuration for entities of the climate domain.\n */\nclass ClimateView extends _AbstractView__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    /** Returns the default configuration object for the view. */\n    static getDefaultConfig() {\n        return {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('climate.climates'),\n            path: 'climates',\n            icon: 'mdi:thermostat',\n            subview: false,\n            headerCardConfiguration: {\n                showControls: false,\n            },\n        };\n    }\n    /** Returns the default configuration of the view's Header card. */\n    static getViewHeaderCardConfig() {\n        return {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('climate.all_climates'),\n            subtitle: `${_Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.getCountTemplate(ClimateView.domain, 'ne', 'off')} ${(0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('climate.climates')} ` +\n                (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('generic.busy'),\n        };\n    }\n    /**\n     * Class constructor.\n     *\n     * @param {ViewConfig} [customConfiguration] Custom view configuration.\n     */\n    constructor(customConfiguration) {\n        super();\n        this.initializeViewConfig(ClimateView.getDefaultConfig(), customConfiguration, ClimateView.getViewHeaderCardConfig());\n    }\n}\n/**The domain of the entities that the view is representing. */\nClimateView.domain = 'climate';\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ClimateView);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/views/ClimateView.ts?\n}");

/***/ }),

/***/ "./src/views/CoverView.ts":
/*!********************************!*\
  !*** ./src/views/CoverView.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Registry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Registry */ \"./src/Registry.ts\");\n/* harmony import */ var _utilities_localize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/localize */ \"./src/utilities/localize.ts\");\n/* harmony import */ var _AbstractView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AbstractView */ \"./src/views/AbstractView.ts\");\n// noinspection JSUnusedGlobalSymbols Class is dynamically imported.\n\n\n\n/**\n * Cover View Class.\n *\n * Used to create a view configuration for entities of the cover domain.\n */\nclass CoverView extends _AbstractView__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    /** Returns the default configuration object for the view. */\n    static getDefaultConfig() {\n        return {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('cover.covers'),\n            path: 'covers',\n            icon: 'mdi:window-open',\n            subview: false,\n            headerCardConfiguration: {\n                iconOn: 'mdi:arrow-up',\n                iconOff: 'mdi:arrow-down',\n                onService: 'cover.open_cover',\n                offService: 'cover.close_cover',\n            },\n        };\n    }\n    /** Returns the default configuration of the view's Header card. */\n    static getViewHeaderCardConfig() {\n        return {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('cover.all_covers'),\n            subtitle: `${_Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.getCountTemplate(CoverView.domain, 'search', '(open|opening|closing)')} ` +\n                `${(0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('cover.covers')} ` +\n                `${(0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('generic.unclosed')}`,\n        };\n    }\n    /**\n     * Class constructor.\n     *\n     * @param {ViewConfig} [customConfiguration] Custom view configuration.\n     */\n    constructor(customConfiguration) {\n        super();\n        this.initializeViewConfig(CoverView.getDefaultConfig(), customConfiguration, CoverView.getViewHeaderCardConfig());\n    }\n}\n/** The domain of the entities that the view is representing. */\nCoverView.domain = 'cover';\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CoverView);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/views/CoverView.ts?\n}");

/***/ }),

/***/ "./src/views/FanView.ts":
/*!******************************!*\
  !*** ./src/views/FanView.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Registry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Registry */ \"./src/Registry.ts\");\n/* harmony import */ var _utilities_localize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/localize */ \"./src/utilities/localize.ts\");\n/* harmony import */ var _AbstractView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AbstractView */ \"./src/views/AbstractView.ts\");\n// noinspection JSUnusedGlobalSymbols Class is dynamically imported.\n\n\n\n/**\n * Fan View Class.\n *\n * Used to create a view configuration for entities of the fan domain.\n */\nclass FanView extends _AbstractView__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    /** Returns the default configuration object for the view. */\n    static getDefaultConfig() {\n        return {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('fan.fans'),\n            path: 'fans',\n            icon: 'mdi:fan',\n            subview: false,\n            headerCardConfiguration: {\n                iconOn: 'mdi:fan',\n                iconOff: 'mdi:fan-off',\n                onService: 'fan.turn_on',\n                offService: 'fan.turn_off',\n            },\n        };\n    }\n    /** Returns the default configuration of the view's Header card. */\n    static getViewHeaderCardConfig() {\n        return {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('fan.all_fans'),\n            subtitle: `${_Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.getCountTemplate(FanView.domain, 'eq', 'on')} ${(0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('fan.fans')} ` + (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('generic.on'),\n        };\n    }\n    /**\n     * Class constructor.\n     *\n     * @param {ViewConfig} [customConfiguration] Custom view configuration.\n     */\n    constructor(customConfiguration) {\n        super();\n        this.initializeViewConfig(FanView.getDefaultConfig(), customConfiguration, FanView.getViewHeaderCardConfig());\n    }\n}\n/** The domain of the entities that the view is representing. */\nFanView.domain = 'fan';\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FanView);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/views/FanView.ts?\n}");

/***/ }),

/***/ "./src/views/HomeView.ts":
/*!*******************************!*\
  !*** ./src/views/HomeView.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Registry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Registry */ \"./src/Registry.ts\");\n/* harmony import */ var _utilities_debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/debug */ \"./src/utilities/debug.ts\");\n/* harmony import */ var _utilities_localize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities/localize */ \"./src/utilities/localize.ts\");\n/* harmony import */ var _AbstractView__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AbstractView */ \"./src/views/AbstractView.ts\");\n// noinspection JSUnusedGlobalSymbols Class is dynamically imported.\n\n\n\n\n/**\n * Home View Class.\n *\n * Used to create a Home view.\n */\nclass HomeView extends _AbstractView__WEBPACK_IMPORTED_MODULE_3__[\"default\"] {\n    /**\n     * Class constructor.\n     *\n     * @param {ViewConfig} [customConfiguration] Custom view configuration.\n     */\n    constructor(customConfiguration) {\n        super();\n        this.baseConfiguration = { ...this.baseConfiguration, ...HomeView.getDefaultConfig(), ...customConfiguration };\n    }\n    /** Returns the default configuration object for the view. */\n    static getDefaultConfig() {\n        return {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_2__.localize)('generic.home'),\n            icon: undefined, //'mdi:home',\n            path: 'home',\n            subview: false,\n        };\n    }\n    /**\n     * Create the configuration of the cards to include in the view.\n     *\n     * @override\n     */\n    async createCardConfigurations() {\n        const homeViewCards = [];\n        let weatherSection, lightsOnSection;\n        try {\n            [weatherSection, lightsOnSection] = await Promise.all([\n                this.weatherSection(),\n                this.createLightsOnSection(),\n            ]);\n        }\n        catch (e) {\n            (0,_utilities_debug__WEBPACK_IMPORTED_MODULE_1__.logMessage)(_utilities_debug__WEBPACK_IMPORTED_MODULE_1__.lvlError, 'Error importing created sections!', e);\n            return homeViewCards;\n        }\n        if (_Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.strategyOptions.quick_access_cards) {\n            homeViewCards.push(..._Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.strategyOptions.quick_access_cards);\n        }\n        if (weatherSection) {\n            homeViewCards.push(weatherSection);\n        }\n        if (lightsOnSection) {\n            homeViewCards.push(lightsOnSection);\n        }\n        if (_Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.strategyOptions.extra_cards) {\n            homeViewCards.push(..._Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.strategyOptions.extra_cards);\n        }\n        return homeViewCards;\n    }\n    /**\n     * Create the weather section to include in the view.\n     *\n     * If the section is marked as hidden in the strategy option, then the section is not created.\n     */\n    async weatherSection() {\n        if (_Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.strategyOptions.home_view.hidden.includes('weather')) {\n            return;\n        }\n        const GridCard = (await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../cards/GridCard */ \"./src/cards/GridCard.ts\"))).default;\n        let result = GridCard.getDefaultConfig();\n        // Add Heading card to the grid card.\n        const HeadingCard = (await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../cards/HeadingCard */ \"./src/cards/HeadingCard.ts\"))).default;\n        let weatherHeadingConfig = HeadingCard.getDefaultConfig();\n        weatherHeadingConfig.heading = (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_2__.localize)('weather.weather');\n        weatherHeadingConfig.icon = 'mdi:sun-thermometer-outline';\n        weatherHeadingConfig.heading_style = 'title';\n        result.cards.push(weatherHeadingConfig);\n        // Add Weather card to the grid card.\n        const ClockWeatherCard = (await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../cards/ClockWeatherCard */ \"./src/cards/ClockWeatherCard.ts\"))).default;\n        const weatherEntities = _Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.entities.filter((entity) => entity.entity_id.startsWith('weather.'));\n        if (weatherEntities.length === 0) {\n            (0,_utilities_debug__WEBPACK_IMPORTED_MODULE_1__.logMessage)(_utilities_debug__WEBPACK_IMPORTED_MODULE_1__.lvlError, 'No weather entities found for weather section!');\n        }\n        else {\n            result.cards.push(...weatherEntities.map((weather) => new ClockWeatherCard(weather).getCard()));\n        }\n        if (!_Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.strategyOptions.home_view.weather_details.hidden) {\n            // Add Expander card for weather details.\n            const ExpanderCard = (await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../cards/ExpanderCard */ \"./src/cards/ExpanderCard.ts\"))).default;\n            let weatherDetailsExpanderConfig = ExpanderCard.getDefaultConfig();\n            weatherDetailsExpanderConfig.cards = [];\n            weatherDetailsExpanderConfig.title = (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_2__.localize)('weather.details');\n            // Add Pollen details cards to the expander.\n            if (_Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.strategyOptions.home_view.weather_details.grass_pollen_entity ||\n                _Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.strategyOptions.home_view.weather_details.trees_pollen_entity ||\n                _Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.strategyOptions.home_view.weather_details.weeds_pollen_entity) {\n                const HorizontalStackCard = (await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../cards/HorizontalStackCard */ \"./src/cards/HorizontalStackCard.ts\"))).default;\n                let pollenCardsConfig = HorizontalStackCard.getDefaultConfig();\n                const TileCard = (await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../cards/TileCard */ \"./src/cards/TileCard.ts\"))).default;\n                if (_Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.strategyOptions.home_view.weather_details.grass_pollen_entity) {\n                    let grassPollenCard = TileCard.getDefaultConfig();\n                    grassPollenCard.entity = _Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.strategyOptions.home_view.weather_details.grass_pollen_entity;\n                    grassPollenCard.name = (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_2__.localize)('weather.grass_pollen');\n                    grassPollenCard.features_position = 'bottom';\n                    grassPollenCard.vertical = true;\n                    pollenCardsConfig.cards.push(grassPollenCard);\n                }\n                if (_Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.strategyOptions.home_view.weather_details.trees_pollen_entity) {\n                    let treesPollenCard = TileCard.getDefaultConfig();\n                    treesPollenCard.entity = _Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.strategyOptions.home_view.weather_details.trees_pollen_entity;\n                    treesPollenCard.name = (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_2__.localize)('weather.trees_pollen');\n                    treesPollenCard.features_position = 'bottom';\n                    treesPollenCard.vertical = true;\n                    pollenCardsConfig.cards.push(treesPollenCard);\n                }\n                if (_Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.strategyOptions.home_view.weather_details.weeds_pollen_entity) {\n                    let weedsPollenCard = TileCard.getDefaultConfig();\n                    weedsPollenCard.entity = _Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.strategyOptions.home_view.weather_details.weeds_pollen_entity;\n                    weedsPollenCard.name = (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_2__.localize)('weather.weeds_pollen');\n                    weedsPollenCard.features_position = 'bottom';\n                    weedsPollenCard.vertical = true;\n                    pollenCardsConfig.cards.push(weedsPollenCard);\n                }\n                weatherDetailsExpanderConfig.cards.push(pollenCardsConfig);\n            }\n            // Add Weather Radar card to the expander.\n            const WeatherRadarCard = (await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../cards/WeatherRadarCard */ \"./src/cards/WeatherRadarCard.ts\"))).default;\n            let weatherRadarCardConfig = WeatherRadarCard.getDefaultConfig();\n            weatherDetailsExpanderConfig.cards.push(weatherRadarCardConfig);\n            result.cards.push(weatherDetailsExpanderConfig);\n        }\n        return result;\n    }\n    /**\n     * Create a lights on section to include in the view.\n     *\n     * If the section is marked as hidden in the strategy option, then the section is not created.\n     */\n    async createLightsOnSection() {\n        if (_Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.strategyOptions.home_view.hidden.includes('lightsOn')) { // The section is hidden.\n            return;\n        }\n        const GridCard = (await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../cards/GridCard */ \"./src/cards/GridCard.ts\"))).default;\n        let result = GridCard.getDefaultConfig();\n        // Add Heading card to the grid card.\n        const HeadingCard = (await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../cards/HeadingCard */ \"./src/cards/HeadingCard.ts\"))).default;\n        let lightsOnHeading = HeadingCard.getDefaultConfig();\n        lightsOnHeading.heading = (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_2__.localize)('light.lights_on_right_now');\n        lightsOnHeading.icon = 'mdi:lightbulb-group-outline';\n        lightsOnHeading.heading_style = 'title';\n        result.cards.push(lightsOnHeading);\n        _Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.floors.forEach((floor) => {\n            if (!floor.hidden) {\n                // logMessage(lvlInfo, 'Found Floor: ', floor);\n                // Create a card for each floor.\n            }\n        });\n        return result;\n    }\n}\n/** The domain of the entities that the view is representing. */\nHomeView.domain = 'home';\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (HomeView);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/views/HomeView.ts?\n}");

/***/ }),

/***/ "./src/views/LightView.ts":
/*!********************************!*\
  !*** ./src/views/LightView.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _AbstractView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractView */ \"./src/views/AbstractView.ts\");\n/* harmony import */ var _Registry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Registry */ \"./src/Registry.ts\");\n/* harmony import */ var _utilities_localize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities/localize */ \"./src/utilities/localize.ts\");\n/* harmony import */ var _utilities_debug__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/debug */ \"./src/utilities/debug.ts\");\n\n\n\n\nclass LightView extends _AbstractView__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(customConfiguration) {\n        super();\n        this.initializeViewConfig(LightView.getDefaultConfig(), customConfiguration, LightView.getViewHeaderCardConfig());\n    }\n    static getDefaultConfig() {\n        return {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_2__.localize)('light.lights'),\n            path: 'lights',\n            icon: 'mdi:lightbulb-group',\n            subview: false,\n            headerCardConfiguration: {\n                iconOn: 'mdi:lightbulb',\n                iconOff: 'mdi:lightbulb-off',\n                onService: 'light.turn_on',\n                offService: 'light.turn_off',\n            },\n        };\n    }\n    /** Returns the default configuration of the view's Header card. */\n    static getViewHeaderCardConfig() {\n        return {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_2__.localize)('light.all_lights'),\n            subtitle: `${_Registry__WEBPACK_IMPORTED_MODULE_1__.Registry.getCountTemplate(LightView.domain, 'eq', 'on')} ${(0,_utilities_localize__WEBPACK_IMPORTED_MODULE_2__.localize)('light.lights')} ` +\n                (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_2__.localize)('generic.on'),\n        };\n    }\n    /**\n       * Create the configuration of the cards to include in the view.\n       *\n       * @override\n       */\n    async createCardConfigurations() {\n        const viewCards = [];\n        let lightsSection;\n        try {\n            [lightsSection] = await Promise.all([\n                this.lightsSection(),\n            ]);\n        }\n        catch (e) {\n            (0,_utilities_debug__WEBPACK_IMPORTED_MODULE_3__.logMessage)(_utilities_debug__WEBPACK_IMPORTED_MODULE_3__.lvlError, 'Error importing created sections!', e);\n            return viewCards;\n        }\n        if (lightsSection) {\n            viewCards.push(lightsSection);\n        }\n        return viewCards;\n    }\n    /**\n       * Create the lights section to include in the view.\n       *\n       * If the section is marked as hidden in the strategy option, then the section is not created.\n       */\n    async lightsSection() {\n        const GridCard = (await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../cards/GridCard */ \"./src/cards/GridCard.ts\"))).default;\n        let result = GridCard.getDefaultConfig();\n        // Add Heading card to the grid card.\n        const HeadingCard = (await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../cards/HeadingCard */ \"./src/cards/HeadingCard.ts\"))).default;\n        let lightFloorHeading = HeadingCard.getDefaultConfig();\n        // weatherHeading.heading = localize('');\n        // weatherHeading.icon = 'mdi:sun-thermometer-outline';\n        // weatherHeading.heading_style = 'title';\n        result.cards.push(lightFloorHeading);\n        return result;\n    }\n}\n/** The domain of the entities that the view is representing. */\nLightView.domain = 'light';\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LightView);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/views/LightView.ts?\n}");

/***/ }),

/***/ "./src/views/LockView.ts":
/*!*******************************!*\
  !*** ./src/views/LockView.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Registry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Registry */ \"./src/Registry.ts\");\n/* harmony import */ var _utilities_localize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/localize */ \"./src/utilities/localize.ts\");\n/* harmony import */ var _AbstractView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AbstractView */ \"./src/views/AbstractView.ts\");\n// noinspection JSUnusedGlobalSymbols Class is dynamically imported.\n\n\n\n/**\n * Lock View Class.\n *\n * Used to create a view configuration for entities of the lock domain.\n */\nclass LockView extends _AbstractView__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    /** Returns the default configuration object for the view. */\n    static getDefaultConfig() {\n        return {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('locks.locks'),\n            path: 'locks',\n            icon: 'mdi:lock-open',\n            subview: false,\n            headerCardConfiguration: {\n                iconOn: 'mdi:lock-open',\n                iconOff: 'mdi:lock',\n                onService: 'lock.lock',\n                offService: 'lock.unlock',\n            },\n        };\n    }\n    /** Returns the default configuration of the view's Header card. */\n    static getViewHeaderCardConfig() {\n        return {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('lock.all_locks'),\n            subtitle: `${_Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.getCountTemplate(LockView.domain, 'ne', 'locked')} ${(0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('lock.locks')} ` +\n                (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('lock.unlocked'),\n        };\n    }\n    /**\n     * Class constructor.\n     *\n     * @param {ViewConfig} [customConfiguration] Custom view configuration.\n     */\n    constructor(customConfiguration) {\n        super();\n        this.initializeViewConfig(LockView.getDefaultConfig(), customConfiguration, LockView.getViewHeaderCardConfig());\n    }\n}\n/** The domain of the entities that the view is representing. */\nLockView.domain = 'lock';\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LockView);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/views/LockView.ts?\n}");

/***/ }),

/***/ "./src/views/SceneView.ts":
/*!********************************!*\
  !*** ./src/views/SceneView.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _utilities_localize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utilities/localize */ \"./src/utilities/localize.ts\");\n/* harmony import */ var _AbstractView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AbstractView */ \"./src/views/AbstractView.ts\");\n// noinspection JSUnusedGlobalSymbols Class is dynamically imported.\n\n\n/**\n * Scene View Class.\n *\n * sed to create a view configuration for entities of the scene domain.\n */\nclass SceneView extends _AbstractView__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    /** Returns the default configuration object for the view. */\n    static getDefaultConfig() {\n        return {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_0__.localize)('scene.scenes'),\n            path: 'scenes',\n            icon: 'mdi:palette',\n            subview: false,\n            headerCardConfiguration: {\n                showControls: false,\n            },\n        };\n    }\n    /** Returns the default configuration of the view's Header card. */\n    static getViewHeaderCardConfig() {\n        return {};\n    }\n    /**\n     * Class constructor.\n     *\n     * @param {ViewConfig} [customConfiguration] Custom view configuration.\n     */\n    constructor(customConfiguration) {\n        super();\n        this.initializeViewConfig(SceneView.getDefaultConfig(), customConfiguration, SceneView.getViewHeaderCardConfig());\n    }\n}\n/** The domain of the entities that the view is representing. */\nSceneView.domain = 'scene';\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SceneView);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/views/SceneView.ts?\n}");

/***/ }),

/***/ "./src/views/SwitchView.ts":
/*!*********************************!*\
  !*** ./src/views/SwitchView.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Registry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Registry */ \"./src/Registry.ts\");\n/* harmony import */ var _utilities_localize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/localize */ \"./src/utilities/localize.ts\");\n/* harmony import */ var _AbstractView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AbstractView */ \"./src/views/AbstractView.ts\");\n// noinspection JSUnusedGlobalSymbols Class is dynamically imported.\n\n\n\n/**\n * Switch View Class.\n *\n * Used to create a view configuration for entities of the switch domain.\n */\nclass SwitchView extends _AbstractView__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    /** Returns the default configuration object for the view. */\n    static getDefaultConfig() {\n        return {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('switch.switches'),\n            path: 'switches',\n            icon: 'mdi:dip-switch',\n            subview: false,\n            headerCardConfiguration: {\n                iconOn: 'mdi:power-plug',\n                iconOff: 'mdi:power-plug-off',\n                onService: 'switch.turn_on',\n                offService: 'switch.turn_off',\n            },\n        };\n    }\n    /** Returns the default configuration of the view's Header card. */\n    static getViewHeaderCardConfig() {\n        return {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('switch.all_switches'),\n            subtitle: `${_Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.getCountTemplate(SwitchView.domain, 'eq', 'on')} ${(0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('switch.switches')} ` +\n                (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('generic.on'),\n        };\n    }\n    /**\n     * Class constructor.\n     *\n     * @param {ViewConfig} [customConfiguration] Custom view configuration.\n     */\n    constructor(customConfiguration) {\n        super();\n        this.initializeViewConfig(SwitchView.getDefaultConfig(), customConfiguration, SwitchView.getViewHeaderCardConfig());\n    }\n}\n/** The domain of the entities that the view is representing. */\nSwitchView.domain = 'switch';\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SwitchView);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/views/SwitchView.ts?\n}");

/***/ }),

/***/ "./src/views/VacuumView.ts":
/*!*********************************!*\
  !*** ./src/views/VacuumView.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Registry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Registry */ \"./src/Registry.ts\");\n/* harmony import */ var _utilities_localize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/localize */ \"./src/utilities/localize.ts\");\n/* harmony import */ var _AbstractView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AbstractView */ \"./src/views/AbstractView.ts\");\n// noinspection JSUnusedGlobalSymbols Class is dynamically imported.\n\n\n\n/**\n * Vacuum View Class.\n *\n * Used to create a view configuration for entities of the vacuum domain.\n */\nclass VacuumView extends _AbstractView__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    /** Returns the default configuration object for the view. */\n    static getDefaultConfig() {\n        return {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('vacuum.vacuums'),\n            path: 'vacuums',\n            icon: 'mdi:robot-vacuum',\n            subview: false,\n            headerCardConfiguration: {\n                iconOn: 'mdi:robot-vacuum',\n                iconOff: 'mdi:robot-vacuum-off',\n                onService: 'vacuum.start',\n                offService: 'vacuum.stop',\n            },\n        };\n    }\n    /** Returns the default configuration of the view's Header card. */\n    static getViewHeaderCardConfig() {\n        return {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('vacuum.all_vacuums'),\n            subtitle: _Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.getCountTemplate(VacuumView.domain, 'in', '[cleaning, returning]') +\n                ` ${(0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('vacuum.vacuums')} ${(0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('generic.busy')}`,\n        };\n    }\n    /**\n     * Class constructor.\n     *\n     * @param {ViewConfig} [customConfiguration] Custom view configuration.\n     */\n    constructor(customConfiguration) {\n        super();\n        this.initializeViewConfig(VacuumView.getDefaultConfig(), customConfiguration, VacuumView.getViewHeaderCardConfig());\n    }\n}\n/** The domain of the entities that the view is representing. */\nVacuumView.domain = 'vacuum';\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (VacuumView);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/views/VacuumView.ts?\n}");

/***/ }),

/***/ "./src/views/ValveView.ts":
/*!********************************!*\
  !*** ./src/views/ValveView.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Registry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Registry */ \"./src/Registry.ts\");\n/* harmony import */ var _utilities_localize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/localize */ \"./src/utilities/localize.ts\");\n/* harmony import */ var _AbstractView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AbstractView */ \"./src/views/AbstractView.ts\");\n// noinspection JSUnusedGlobalSymbols Class is dynamically imported.\n\n\n\n/**\n * Valve View Class.\n *\n * Used to create a view configuration for entities of the valve domain.\n */\nclass ValveView extends _AbstractView__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    /**\n     * Class constructor.\n     *\n     * @param {ViewConfig} [customConfiguration] Custom view configuration.\n     */\n    constructor(customConfiguration) {\n        super();\n        this.initializeViewConfig(ValveView.getDefaultConfig(), customConfiguration, ValveView.getViewHeaderCardConfig());\n    }\n    /** Returns the default configuration object for the view. */\n    static getDefaultConfig() {\n        return {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('valve.valves'),\n            path: 'valves',\n            icon: 'mdi:valve',\n            subview: false,\n            headerCardConfiguration: {\n                iconOn: 'mdi:valve-open',\n                iconOff: 'mdi:valve-closed',\n                onService: 'valve.open_valve',\n                offService: 'valve.close_valve',\n            },\n        };\n    }\n    /** Returns the default configuration of the view's Header card. */\n    static getViewHeaderCardConfig() {\n        return {\n            title: (0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('valve.all_valves'),\n            subtitle: _Registry__WEBPACK_IMPORTED_MODULE_0__.Registry.getCountTemplate(ValveView.domain, 'in', '[closed]') +\n                ` ${(0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('valve.valves')} ${(0,_utilities_localize__WEBPACK_IMPORTED_MODULE_1__.localize)('valve.unclosed')}`,\n        };\n    }\n}\n/** The domain of the entities that the view is representing. */\nValveView.domain = 'valve';\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ValveView);\n\n\n//# sourceURL=webpack://jetson-strategy/./src/views/ValveView.ts?\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/create fake namespace object */
/******/ 	(() => {
/******/ 		var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);
/******/ 		var leafPrototypes;
/******/ 		// create a fake namespace object
/******/ 		// mode & 1: value is a module id, require it
/******/ 		// mode & 2: merge all properties of value into the ns
/******/ 		// mode & 4: return value when already ns object
/******/ 		// mode & 16: return value when it's Promise-like
/******/ 		// mode & 8|1: behave like require
/******/ 		__webpack_require__.t = function(value, mode) {
/******/ 			if(mode & 1) value = this(value);
/******/ 			if(mode & 8) return value;
/******/ 			if(typeof value === 'object' && value) {
/******/ 				if((mode & 4) && value.__esModule) return value;
/******/ 				if((mode & 16) && typeof value.then === 'function') return value;
/******/ 			}
/******/ 			var ns = Object.create(null);
/******/ 			__webpack_require__.r(ns);
/******/ 			var def = {};
/******/ 			leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
/******/ 			for(var current = mode & 2 && value; (typeof current == 'object' || typeof current == 'function') && !~leafPrototypes.indexOf(current); current = getProto(current)) {
/******/ 				Object.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));
/******/ 			}
/******/ 			def['default'] = () => (value);
/******/ 			__webpack_require__.d(ns, def);
/******/ 			return ns;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		// The chunk loading function for additional chunks
/******/ 		// Since all referenced chunks are already included
/******/ 		// in this file, this function is empty here.
/******/ 		__webpack_require__.e = () => (Promise.resolve());
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/jetson-strategy.ts");
/******/ 	
/******/ })()
;